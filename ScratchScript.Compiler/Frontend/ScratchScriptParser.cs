//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Resources/Grammar/ScratchScriptParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ScratchScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Whitespace=1, NewLine=2, Semicolon=3, LeftParen=4, RightParen=5, LeftBracket=6, 
		RightBracket=7, LeftBrace=8, RightBrace=9, OpenInterpolatedString=10, 
		Assignment=11, Comma=12, Not=13, Arrow=14, Colon=15, Dot=16, Ternary=17, 
		SingleLineCommentStart=18, MultiLineCommentStart=19, MultiLineCommentEnd=20, 
		Comment=21, LineComment=22, At=23, Hashtag=24, Multiply=25, Plus=26, Minus=27, 
		Divide=28, Power=29, Modulus=30, And=31, Or=32, BitwiseAnd=33, BitwiseOr=34, 
		BitwiseXor=35, PostIncrement=36, PostDecrement=37, Greater=38, Lesser=39, 
		GreaterOrEqual=40, LesserOrEqual=41, Equal=42, NotEqual=43, AdditionAsignment=44, 
		SubtractionAssignment=45, MultiplicationAssignment=46, DivisionAssignment=47, 
		ModulusAssignment=48, PowerAssignment=49, If=50, Else=51, True=52, False=53, 
		Break=54, Default=55, Debugger=56, As=57, For=58, Ir=59, Case=60, Switch=61, 
		While=62, VariableDeclare=63, Import=64, EnumDeclare=65, FunctionDeclare=66, 
		Return=67, Throw=68, Repeat=69, Event=70, From=71, Namespace=72, Type=73, 
		List=74, Number=75, Identifier=76, String=77, Color=78, EnterInterpolatedExpression=79, 
		Text=80, EscapeSequence=81, CloseInterpolatedString=82;
	public const int
		RULE_program = 0, RULE_topLevelStatement = 1, RULE_line = 2, RULE_statement = 3, 
		RULE_eventStatement = 4, RULE_assignmentStatement = 5, RULE_listAssignmentStatement = 6, 
		RULE_variableDeclarationStatement = 7, RULE_memberFunctionCallStatement = 8, 
		RULE_functionCallStatement = 9, RULE_functionDeclarationStatement = 10, 
		RULE_enumDeclarationStatement = 11, RULE_enumEntry = 12, RULE_irBlockStatement = 13, 
		RULE_irStatement = 14, RULE_ifStatement = 15, RULE_whileStatement = 16, 
		RULE_forStatement = 17, RULE_elseIfStatement = 18, RULE_postIncrementStatement = 19, 
		RULE_importStatement = 20, RULE_attributeStatement = 21, RULE_returnStatement = 22, 
		RULE_repeatStatement = 23, RULE_throwStatement = 24, RULE_breakStatement = 25, 
		RULE_namespaceStatement = 26, RULE_switchStatement = 27, RULE_typedIdentifier = 28, 
		RULE_functionArgument = 29, RULE_debuggerStatement = 30, RULE_expression = 31, 
		RULE_multiplyOperators = 32, RULE_leftShift = 33, RULE_rightShift = 34, 
		RULE_addOperators = 35, RULE_compareOperators = 36, RULE_booleanOperators = 37, 
		RULE_bitwiseOperators = 38, RULE_assignmentOperators = 39, RULE_postIncrementOperators = 40, 
		RULE_case = 41, RULE_block = 42, RULE_switchBlock = 43, RULE_defaultCase = 44, 
		RULE_importAll = 45, RULE_constant = 46, RULE_comment = 47, RULE_boolean = 48, 
		RULE_type = 49, RULE_interpolatedString = 50, RULE_interpolatedStringPart = 51;
	public static readonly string[] ruleNames = {
		"program", "topLevelStatement", "line", "statement", "eventStatement", 
		"assignmentStatement", "listAssignmentStatement", "variableDeclarationStatement", 
		"memberFunctionCallStatement", "functionCallStatement", "functionDeclarationStatement", 
		"enumDeclarationStatement", "enumEntry", "irBlockStatement", "irStatement", 
		"ifStatement", "whileStatement", "forStatement", "elseIfStatement", "postIncrementStatement", 
		"importStatement", "attributeStatement", "returnStatement", "repeatStatement", 
		"throwStatement", "breakStatement", "namespaceStatement", "switchStatement", 
		"typedIdentifier", "functionArgument", "debuggerStatement", "expression", 
		"multiplyOperators", "leftShift", "rightShift", "addOperators", "compareOperators", 
		"booleanOperators", "bitwiseOperators", "assignmentOperators", "postIncrementOperators", 
		"case", "block", "switchBlock", "defaultCase", "importAll", "constant", 
		"comment", "boolean", "type", "interpolatedString", "interpolatedStringPart"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", null, 
		"'='", "','", "'!'", "'->'", "':'", "'.'", "'?'", "'//'", "'/*'", "'*/'", 
		null, null, "'@'", "'#'", "'*'", "'+'", "'-'", "'/'", "'**'", "'%'", "'&&'", 
		"'||'", "'&'", "'|'", "'^'", "'++'", "'--'", "'>'", "'<'", "'>='", "'<='", 
		"'=='", "'!='", "'+='", "'-='", "'*='", "'/='", "'%='", "'**='", "'if'", 
		"'else'", "'true'", "'false'", "'break'", "'default'", "'debugger'", null, 
		"'for'", "'ir'", null, "'switch'", "'while'", null, null, null, null, 
		null, null, "'repeat'", null, null, null, null, "'list'", null, null, 
		null, null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "NewLine", "Semicolon", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "OpenInterpolatedString", 
		"Assignment", "Comma", "Not", "Arrow", "Colon", "Dot", "Ternary", "SingleLineCommentStart", 
		"MultiLineCommentStart", "MultiLineCommentEnd", "Comment", "LineComment", 
		"At", "Hashtag", "Multiply", "Plus", "Minus", "Divide", "Power", "Modulus", 
		"And", "Or", "BitwiseAnd", "BitwiseOr", "BitwiseXor", "PostIncrement", 
		"PostDecrement", "Greater", "Lesser", "GreaterOrEqual", "LesserOrEqual", 
		"Equal", "NotEqual", "AdditionAsignment", "SubtractionAssignment", "MultiplicationAssignment", 
		"DivisionAssignment", "ModulusAssignment", "PowerAssignment", "If", "Else", 
		"True", "False", "Break", "Default", "Debugger", "As", "For", "Ir", "Case", 
		"Switch", "While", "VariableDeclare", "Import", "EnumDeclare", "FunctionDeclare", 
		"Return", "Throw", "Repeat", "Event", "From", "Namespace", "Type", "List", 
		"Number", "Identifier", "String", "Color", "EnterInterpolatedExpression", 
		"Text", "EscapeSequence", "CloseInterpolatedString"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ScratchScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ScratchScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ScratchScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ScratchScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ScratchScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & 719080604565505L) != 0)) {
				{
				{
				State = 104;
				topLevelStatement();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationStatementContext functionDeclarationStatement() {
			return GetRuleContext<FunctionDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationStatementContext enumDeclarationStatement() {
			return GetRuleContext<EnumDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext attributeStatement() {
			return GetRuleContext<AttributeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventStatementContext eventStatement() {
			return GetRuleContext<EventStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceStatementContext namespaceStatement() {
			return GetRuleContext<NamespaceStatementContext>(0);
		}
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelStatement);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				functionDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				enumDeclarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114;
				attributeStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 115;
				eventStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 116;
				importStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 117;
				namespaceStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IrBlockStatementContext irBlockStatement() {
			return GetRuleContext<IrBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 4, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBracket:
			case OpenInterpolatedString:
			case Not:
			case Plus:
			case Minus:
			case True:
			case False:
			case VariableDeclare:
			case Number:
			case Identifier:
			case String:
			case Color:
				{
				{
				State = 120;
				statement();
				State = 121;
				Match(Semicolon);
				}
				}
				break;
			case If:
				{
				State = 123;
				ifStatement();
				}
				break;
			case While:
				{
				State = 124;
				whileStatement();
				}
				break;
			case Repeat:
				{
				State = 125;
				repeatStatement();
				}
				break;
			case For:
				{
				State = 126;
				forStatement();
				}
				break;
			case Switch:
				{
				State = 127;
				switchStatement();
				}
				break;
			case Ir:
				{
				State = 128;
				irBlockStatement();
				}
				break;
			case Return:
				{
				State = 129;
				returnStatement();
				}
				break;
			case Break:
				{
				State = 130;
				breakStatement();
				}
				break;
			case Debugger:
				{
				State = 131;
				debuggerStatement();
				}
				break;
			case Throw:
				{
				State = 132;
				throwStatement();
				}
				break;
			case Comment:
				{
				State = 133;
				comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAssignmentStatementContext listAssignmentStatement() {
			return GetRuleContext<ListAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberFunctionCallStatementContext memberFunctionCallStatement() {
			return GetRuleContext<MemberFunctionCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostIncrementStatementContext postIncrementStatement() {
			return GetRuleContext<PostIncrementStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				assignmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				listAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				functionCallStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 139;
				memberFunctionCallStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 140;
				variableDeclarationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 141;
				postIncrementStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Event() { return GetToken(ScratchScriptParser.Event, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public EventStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStatementContext eventStatement() {
		EventStatementContext _localctx = new EventStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_eventStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(Event);
			State = 145;
			Match(Identifier);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 146;
				Match(LeftParen);
				{
				State = 147;
				expression(0);
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 148;
						Match(Comma);
						State = 149;
						expression(0);
						}
						} 
					}
					State = 154;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				}
				State = 155;
				Match(RightParen);
				}
			}

			State = 159;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorsContext assignmentOperators() {
			return GetRuleContext<AssignmentOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(Identifier);
			State = 162;
			assignmentOperators();
			State = 163;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(ScratchScriptParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(ScratchScriptParser.RightBracket, 0); }
		public ListAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterListAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitListAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListAssignmentStatementContext listAssignmentStatement() {
		ListAssignmentStatementContext _localctx = new ListAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_listAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(Identifier);
			State = 166;
			Match(LeftBracket);
			State = 167;
			expression(0);
			State = 168;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VariableDeclare() { return GetToken(ScratchScriptParser.VariableDeclare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(ScratchScriptParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(VariableDeclare);
			State = 171;
			Match(Identifier);
			State = 172;
			Match(Assignment);
			State = 173;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberFunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(ScratchScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public MemberFunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberFunctionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberFunctionCallStatementContext memberFunctionCallStatement() {
		MemberFunctionCallStatementContext _localctx = new MemberFunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_memberFunctionCallStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			expression(0);
			State = 176;
			Match(Dot);
			State = 177;
			functionCallStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentContext[] functionArgument() {
			return GetRuleContexts<FunctionArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentContext functionArgument(int i) {
			return GetRuleContext<FunctionArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionCallStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(Identifier);
			State = 180;
			Match(LeftParen);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510799083447376L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 15L) != 0)) {
				{
				State = 181;
				functionArgument();
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 182;
						Match(Comma);
						State = 183;
						functionArgument();
						}
						} 
					}
					State = 188;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
			}

			State = 191;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionDeclare() { return GetToken(ScratchScriptParser.FunctionDeclare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext[] attributeStatement() {
			return GetRuleContexts<AttributeStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext attributeStatement(int i) {
			return GetRuleContext<AttributeStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentifierContext[] typedIdentifier() {
			return GetRuleContexts<TypedIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentifierContext typedIdentifier(int i) {
			return GetRuleContext<TypedIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public FunctionDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationStatementContext functionDeclarationStatement() {
		FunctionDeclarationStatementContext _localctx = new FunctionDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionDeclarationStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 193;
					attributeStatement();
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 199;
			Match(FunctionDeclare);
			State = 200;
			Match(Identifier);
			State = 201;
			Match(LeftParen);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 202;
				typedIdentifier();
				State = 207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 203;
						Match(Comma);
						State = 204;
						typedIdentifier();
						}
						} 
					}
					State = 209;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
			}

			State = 212;
			Match(RightParen);
			State = 213;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EnumDeclare() { return GetToken(ScratchScriptParser.EnumDeclare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumEntryContext[] enumEntry() {
			return GetRuleContexts<EnumEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumEntryContext enumEntry(int i) {
			return GetRuleContext<EnumEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public EnumDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationStatementContext enumDeclarationStatement() {
		EnumDeclarationStatementContext _localctx = new EnumDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclarationStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(EnumDeclare);
			State = 216;
			Match(Identifier);
			State = 217;
			Match(LeftBrace);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 218;
				enumEntry();
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 219;
						Match(Comma);
						State = 220;
						enumEntry();
						}
						} 
					}
					State = 225;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
			}

			State = 228;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(ScratchScriptParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public EnumEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumEntryContext enumEntry() {
		EnumEntryContext _localctx = new EnumEntryContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(Identifier);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assignment) {
				{
				State = 231;
				Match(Assignment);
				State = 232;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IrBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ir() { return GetToken(ScratchScriptParser.Ir, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IrStatementContext[] irStatement() {
			return GetRuleContexts<IrStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IrStatementContext irStatement(int i) {
			return GetRuleContext<IrStatementContext>(i);
		}
		public IrBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_irBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterIrBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitIrBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIrBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IrBlockStatementContext irBlockStatement() {
		IrBlockStatementContext _localctx = new IrBlockStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_irBlockStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(Ir);
			State = 236;
			Match(LeftBrace);
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 237;
					irStatement();
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 243;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IrStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringContext interpolatedString() {
			return GetRuleContext<InterpolatedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(ScratchScriptParser.Return, 0); }
		public IrStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_irStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterIrStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitIrStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIrStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IrStatementContext irStatement() {
		IrStatementContext _localctx = new IrStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_irStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Return) {
				{
				State = 245;
				Match(Return);
				}
			}

			State = 248;
			interpolatedString();
			State = 249;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(ScratchScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(ScratchScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(If);
			State = 252;
			Match(LeftParen);
			State = 253;
			expression(0);
			State = 254;
			Match(RightParen);
			State = 255;
			block();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 256;
				Match(Else);
				State = 257;
				elseIfStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(ScratchScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(While);
			State = 261;
			Match(LeftParen);
			State = 262;
			expression(0);
			State = 263;
			Match(RightParen);
			State = 264;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(ScratchScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(ScratchScriptParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(ScratchScriptParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(For);
			State = 267;
			Match(LeftParen);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9209861237771328432L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 15L) != 0)) {
				{
				State = 268;
				statement();
				}
			}

			State = 271;
			Match(Semicolon);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510799083447376L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 15L) != 0)) {
				{
				State = 272;
				expression(0);
				}
			}

			State = 275;
			Match(Semicolon);
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9209861237771328432L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 15L) != 0)) {
				{
				State = 276;
				statement();
				}
			}

			State = 279;
			Match(RightParen);
			State = 280;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_elseIfStatement);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				block();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostIncrementOperatorsContext postIncrementOperators() {
			return GetRuleContext<PostIncrementOperatorsContext>(0);
		}
		public PostIncrementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementStatementContext postIncrementStatement() {
		PostIncrementStatementContext _localctx = new PostIncrementStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_postIncrementStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(Identifier);
			State = 287;
			postIncrementOperators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(ScratchScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(ScratchScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAllContext importAll() {
			return GetRuleContext<ImportAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(ScratchScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(ScratchScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_importStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(Import);
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				{
				{
				State = 290;
				Match(LeftBrace);
				State = 291;
				Match(Identifier);
				State = 296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 292;
						Match(Comma);
						State = 293;
						Match(Identifier);
						}
						} 
					}
					State = 298;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 299;
				Match(RightBrace);
				}
				}
				break;
			case Multiply:
				{
				State = 300;
				importAll();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 303;
			Match(From);
			State = 304;
			Match(String);
			State = 305;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(ScratchScriptParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public AttributeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterAttributeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitAttributeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStatementContext attributeStatement() {
		AttributeStatementContext _localctx = new AttributeStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_attributeStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(At);
			State = 308;
			Match(Identifier);
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 309;
				Match(LeftParen);
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 109051907L) != 0)) {
					{
					State = 310;
					constant();
					State = 315;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
					while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							State = 311;
							Match(Comma);
							State = 312;
							constant();
							}
							} 
						}
						State = 317;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
					}
					}
				}

				State = 320;
				Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(ScratchScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(Return);
			State = 324;
			expression(0);
			State = 325;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(ScratchScriptParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(Repeat);
			State = 328;
			Match(LeftParen);
			State = 329;
			expression(0);
			State = 330;
			Match(RightParen);
			State = 331;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(ScratchScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(Throw);
			State = 334;
			Match(String);
			State = 335;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(ScratchScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(Break);
			State = 338;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(ScratchScriptParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public NamespaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceStatementContext namespaceStatement() {
		NamespaceStatementContext _localctx = new NamespaceStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_namespaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(Namespace);
			State = 341;
			Match(String);
			State = 342;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(ScratchScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(Switch);
			State = 345;
			Match(LeftParen);
			State = 346;
			expression(0);
			State = 347;
			Match(RightParen);
			State = 348;
			switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterTypedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitTypedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentifierContext typedIdentifier() {
		TypedIdentifierContext _localctx = new TypedIdentifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_typedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(Identifier);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 351;
				Match(Colon);
				State = 352;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		public FunctionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentContext functionArgument() {
		FunctionArgumentContext _localctx = new FunctionArgumentContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 355;
				Match(Identifier);
				State = 356;
				Match(Colon);
				}
				break;
			}
			State = 359;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(ScratchScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebuggerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(Debugger);
			State = 362;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InterpolatedStringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringContext interpolatedString() {
			return GetRuleContext<InterpolatedStringContext>(0);
		}
		public InterpolatedStringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBitwiseExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOperatorsContext bitwiseOperators() {
			return GetRuleContext<BitwiseOperatorsContext>(0);
		}
		public BinaryBitwiseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(ScratchScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryMultiplyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyOperatorsContext multiplyOperators() {
			return GetRuleContext<MultiplyOperatorsContext>(0);
		}
		public BinaryMultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayInitializeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(ScratchScriptParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(ScratchScriptParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ArrayInitializeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(ScratchScriptParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(ScratchScriptParser.RightBracket, 0); }
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOperatorsContext booleanOperators() {
			return GetRuleContext<BooleanOperatorsContext>(0);
		}
		public BinaryBooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryCompareExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorsContext compareOperators() {
			return GetRuleContext<CompareOperatorsContext>(0);
		}
		public BinaryCompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ternary() { return GetToken(ScratchScriptParser.Ternary, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberFunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(ScratchScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public MemberFunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		public BinaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 365;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 366;
				Match(Identifier);
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 367;
				functionCallStatement();
				}
				break;
			case 4:
				{
				_localctx = new ArrayInitializeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 368;
				Match(LeftBracket);
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510799083447376L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 15L) != 0)) {
					{
					State = 369;
					expression(0);
					State = 374;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
					while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							State = 370;
							Match(Comma);
							State = 371;
							expression(0);
							}
							} 
						}
						State = 376;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
					}
					}
				}

				State = 379;
				Match(RightBracket);
				}
				break;
			case 5:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 380;
				Match(LeftParen);
				State = 381;
				expression(0);
				State = 382;
				Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 384;
				Match(Not);
				State = 385;
				expression(10);
				}
				break;
			case 7:
				{
				_localctx = new UnaryAddExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 386;
				addOperators();
				State = 387;
				expression(8);
				}
				break;
			case 8:
				{
				_localctx = new InterpolatedStringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 389;
				interpolatedString();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 428;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 426;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new BinaryBitwiseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 392;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 393;
						bitwiseOperators();
						State = 394;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new BinaryMultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 396;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 397;
						multiplyOperators();
						State = 398;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new BinaryAddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 400;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 401;
						addOperators();
						State = 402;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new BinaryCompareExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 404;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 405;
						compareOperators();
						State = 406;
						expression(5);
						}
						break;
					case 5:
						{
						_localctx = new BinaryBooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 408;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 409;
						booleanOperators();
						State = 410;
						expression(4);
						}
						break;
					case 6:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 412;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 413;
						Match(Ternary);
						State = 414;
						expression(0);
						State = 415;
						Match(Colon);
						State = 416;
						expression(3);
						}
						break;
					case 7:
						{
						_localctx = new MemberFunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 418;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 419;
						Match(Dot);
						State = 420;
						functionCallStatement();
						}
						break;
					case 8:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 421;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 422;
						Match(LeftBracket);
						State = 423;
						expression(0);
						State = 424;
						Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 430;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplyOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(ScratchScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(ScratchScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(ScratchScriptParser.Modulus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(ScratchScriptParser.Power, 0); }
		public MultiplyOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorsContext multiplyOperators() {
		MultiplyOperatorsContext _localctx = new MultiplyOperatorsContext(Context, State);
		EnterRule(_localctx, 64, RULE_multiplyOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1912602624L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lesser() { return GetTokens(ScratchScriptParser.Lesser); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lesser(int i) {
			return GetToken(ScratchScriptParser.Lesser, i);
		}
		public LeftShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftShift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterLeftShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitLeftShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftShiftContext leftShift() {
		LeftShiftContext _localctx = new LeftShiftContext(Context, State);
		EnterRule(_localctx, 66, RULE_leftShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			_localctx.first = Match(Lesser);
			State = 434;
			_localctx.second = Match(Lesser);
			State = 435;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(ScratchScriptParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(ScratchScriptParser.Greater, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 68, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			_localctx.first = Match(Greater);
			State = 438;
			_localctx.second = Match(Greater);
			State = 439;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(ScratchScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(ScratchScriptParser.Minus, 0); }
		public AddOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorsContext addOperators() {
		AddOperatorsContext _localctx = new AddOperatorsContext(Context, State);
		EnterRule(_localctx, 70, RULE_addOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			_la = TokenStream.LA(1);
			if ( !(_la==Plus || _la==Minus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(ScratchScriptParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(ScratchScriptParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(ScratchScriptParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOrEqual() { return GetToken(ScratchScriptParser.GreaterOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lesser() { return GetToken(ScratchScriptParser.Lesser, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LesserOrEqual() { return GetToken(ScratchScriptParser.LesserOrEqual, 0); }
		public CompareOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorsContext compareOperators() {
		CompareOperatorsContext _localctx = new CompareOperatorsContext(Context, State);
		EnterRule(_localctx, 72, RULE_compareOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17317308137472L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(ScratchScriptParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(ScratchScriptParser.Or, 0); }
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorsContext booleanOperators() {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(Context, State);
		EnterRule(_localctx, 74, RULE_booleanOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOr() { return GetToken(ScratchScriptParser.BitwiseOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXor() { return GetToken(ScratchScriptParser.BitwiseXor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAnd() { return GetToken(ScratchScriptParser.BitwiseAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftShiftContext leftShift() {
			return GetRuleContext<LeftShiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public BitwiseOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOperatorsContext bitwiseOperators() {
		BitwiseOperatorsContext _localctx = new BitwiseOperatorsContext(Context, State);
		EnterRule(_localctx, 76, RULE_bitwiseOperators);
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BitwiseOr:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				Match(BitwiseOr);
				}
				break;
			case BitwiseXor:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				Match(BitwiseXor);
				}
				break;
			case BitwiseAnd:
				EnterOuterAlt(_localctx, 3);
				{
				State = 449;
				Match(BitwiseAnd);
				}
				break;
			case Lesser:
				EnterOuterAlt(_localctx, 4);
				{
				State = 450;
				leftShift();
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 5);
				{
				State = 451;
				rightShift();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(ScratchScriptParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AdditionAsignment() { return GetToken(ScratchScriptParser.AdditionAsignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubtractionAssignment() { return GetToken(ScratchScriptParser.SubtractionAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplicationAssignment() { return GetToken(ScratchScriptParser.MultiplicationAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivisionAssignment() { return GetToken(ScratchScriptParser.DivisionAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssignment() { return GetToken(ScratchScriptParser.ModulusAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssignment() { return GetToken(ScratchScriptParser.PowerAssignment, 0); }
		public AssignmentOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorsContext assignmentOperators() {
		AssignmentOperatorsContext _localctx = new AssignmentOperatorsContext(Context, State);
		EnterRule(_localctx, 78, RULE_assignmentOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1108307720800256L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PostIncrement() { return GetToken(ScratchScriptParser.PostIncrement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PostDecrement() { return GetToken(ScratchScriptParser.PostDecrement, 0); }
		public PostIncrementOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementOperatorsContext postIncrementOperators() {
		PostIncrementOperatorsContext _localctx = new PostIncrementOperatorsContext(Context, State);
		EnterRule(_localctx, 80, RULE_postIncrementOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_la = TokenStream.LA(1);
			if ( !(_la==PostIncrement || _la==PostDecrement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(ScratchScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCaseContext defaultCase() {
			return GetRuleContext<DefaultCaseContext>(0);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 82, RULE_case);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 458;
				Match(Case);
				State = 459;
				constant();
				State = 460;
				Match(Colon);
				State = 461;
				block();
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				defaultCase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 84, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(LeftBrace);
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1336443189218761648L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 3847L) != 0)) {
				{
				{
				State = 467;
				line();
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 473;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 86, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(LeftBrace);
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Default || _la==Case) {
				{
				{
				State = 476;
				@case();
				}
				}
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 482;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(ScratchScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DefaultCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCaseContext defaultCase() {
		DefaultCaseContext _localctx = new DefaultCaseContext(Context, State);
		EnterRule(_localctx, 88, RULE_defaultCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(Default);
			State = 485;
			Match(Colon);
			State = 486;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAllContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(ScratchScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(ScratchScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		public ImportAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterImportAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitImportAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAllContext importAll() {
		ImportAllContext _localctx = new ImportAllContext(Context, State);
		EnterRule(_localctx, 90, RULE_importAll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(Multiply);
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 489;
				Match(As);
				State = 490;
				Match(Identifier);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(ScratchScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(ScratchScriptParser.Color, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 92, RULE_constant);
		try {
			State = 497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				Match(Number);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494;
				Match(String);
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 3);
				{
				State = 495;
				boolean();
				}
				break;
			case Color:
				EnterOuterAlt(_localctx, 4);
				{
				State = 496;
				Match(Color);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(ScratchScriptParser.Comment, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 94, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(Comment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(ScratchScriptParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(ScratchScriptParser.False, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 96, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode List() { return GetToken(ScratchScriptParser.List, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lesser() { return GetToken(ScratchScriptParser.Lesser, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(ScratchScriptParser.Greater, 0); }
		public ListTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegularTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(ScratchScriptParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		public RegularTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterRegularType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitRegularType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_type);
		int _la;
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type:
			case Identifier:
				_localctx = new RegularTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 503;
				_la = TokenStream.LA(1);
				if ( !(_la==Type || _la==Identifier) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case List:
				_localctx = new ListTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 504;
				Match(List);
				State = 505;
				Match(Lesser);
				State = 506;
				type();
				State = 507;
				Match(Greater);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenInterpolatedString() { return GetToken(ScratchScriptParser.OpenInterpolatedString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseInterpolatedString() { return GetToken(ScratchScriptParser.CloseInterpolatedString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringPartContext[] interpolatedStringPart() {
			return GetRuleContexts<InterpolatedStringPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringPartContext interpolatedStringPart(int i) {
			return GetRuleContext<InterpolatedStringPartContext>(i);
		}
		public InterpolatedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedStringContext interpolatedString() {
		InterpolatedStringContext _localctx = new InterpolatedStringContext(Context, State);
		EnterRule(_localctx, 100, RULE_interpolatedString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(OpenInterpolatedString);
			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 7L) != 0)) {
				{
				{
				State = 512;
				interpolatedStringPart();
				}
				}
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 518;
			Match(CloseInterpolatedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedStringPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(ScratchScriptParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapeSequence() { return GetToken(ScratchScriptParser.EscapeSequence, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EnterInterpolatedExpression() { return GetToken(ScratchScriptParser.EnterInterpolatedExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		public InterpolatedStringPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedStringPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedStringPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptParserListener typedListener = listener as IScratchScriptParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedStringPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptParserVisitor<TResult> typedVisitor = visitor as IScratchScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedStringPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedStringPartContext interpolatedStringPart() {
		InterpolatedStringPartContext _localctx = new InterpolatedStringPartContext(Context, State);
		EnterRule(_localctx, 102, RULE_interpolatedStringPart);
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Text:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				Match(Text);
				}
				break;
			case EscapeSequence:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521;
				Match(EscapeSequence);
				}
				break;
			case EnterInterpolatedExpression:
				EnterOuterAlt(_localctx, 3);
				{
				State = 522;
				Match(EnterInterpolatedExpression);
				State = 523;
				expression(0);
				State = 524;
				Match(RightBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 33: return leftShift_sempred((LeftShiftContext)_localctx, predIndex);
		case 34: return rightShift_sempred((RightShiftContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 9);
		}
		return true;
	}
	private bool leftShift_sempred(LeftShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShift_sempred(RightShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,82,529,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,1,0,5,0,106,8,0,10,0,12,0,109,9,0,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,119,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,3,2,135,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,143,8,3,1,4,1,4,
		1,4,1,4,1,4,1,4,5,4,151,8,4,10,4,12,4,154,9,4,1,4,1,4,3,4,158,8,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,5,9,185,8,9,10,9,12,9,188,9,9,3,9,190,8,9,1,
		9,1,9,1,10,5,10,195,8,10,10,10,12,10,198,9,10,1,10,1,10,1,10,1,10,1,10,
		1,10,5,10,206,8,10,10,10,12,10,209,9,10,3,10,211,8,10,1,10,1,10,1,10,1,
		11,1,11,1,11,1,11,1,11,1,11,5,11,222,8,11,10,11,12,11,225,9,11,3,11,227,
		8,11,1,11,1,11,1,12,1,12,1,12,3,12,234,8,12,1,13,1,13,1,13,5,13,239,8,
		13,10,13,12,13,242,9,13,1,13,1,13,1,14,3,14,247,8,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,259,8,15,1,16,1,16,1,16,1,16,1,16,
		1,16,1,17,1,17,1,17,3,17,270,8,17,1,17,1,17,3,17,274,8,17,1,17,1,17,3,
		17,278,8,17,1,17,1,17,1,17,1,18,1,18,3,18,285,8,18,1,19,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,5,20,295,8,20,10,20,12,20,298,9,20,1,20,1,20,3,20,
		302,8,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,314,8,
		21,10,21,12,21,317,9,21,3,21,319,8,21,1,21,3,21,322,8,21,1,22,1,22,1,22,
		1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
		1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,
		354,8,28,1,29,1,29,3,29,358,8,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,5,31,373,8,31,10,31,12,31,376,9,31,3,31,378,
		8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,391,8,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,427,8,31,10,31,12,31,430,9,31,1,
		32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,
		37,1,37,1,38,1,38,1,38,1,38,1,38,3,38,453,8,38,1,39,1,39,1,40,1,40,1,41,
		1,41,1,41,1,41,1,41,1,41,3,41,465,8,41,1,42,1,42,5,42,469,8,42,10,42,12,
		42,472,9,42,1,42,1,42,1,43,1,43,5,43,478,8,43,10,43,12,43,481,9,43,1,43,
		1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,3,45,492,8,45,1,46,1,46,1,46,1,
		46,3,46,498,8,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,
		510,8,49,1,50,1,50,5,50,514,8,50,10,50,12,50,517,9,50,1,50,1,50,1,51,1,
		51,1,51,1,51,1,51,1,51,3,51,527,8,51,1,51,9,152,186,196,207,223,240,296,
		315,374,1,62,52,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,0,8,2,0,25,25,28,30,1,0,26,27,1,0,38,43,1,0,
		31,32,2,0,11,11,44,49,1,0,36,37,1,0,52,53,2,0,73,73,76,76,554,0,107,1,
		0,0,0,2,118,1,0,0,0,4,134,1,0,0,0,6,142,1,0,0,0,8,144,1,0,0,0,10,161,1,
		0,0,0,12,165,1,0,0,0,14,170,1,0,0,0,16,175,1,0,0,0,18,179,1,0,0,0,20,196,
		1,0,0,0,22,215,1,0,0,0,24,230,1,0,0,0,26,235,1,0,0,0,28,246,1,0,0,0,30,
		251,1,0,0,0,32,260,1,0,0,0,34,266,1,0,0,0,36,284,1,0,0,0,38,286,1,0,0,
		0,40,289,1,0,0,0,42,307,1,0,0,0,44,323,1,0,0,0,46,327,1,0,0,0,48,333,1,
		0,0,0,50,337,1,0,0,0,52,340,1,0,0,0,54,344,1,0,0,0,56,350,1,0,0,0,58,357,
		1,0,0,0,60,361,1,0,0,0,62,390,1,0,0,0,64,431,1,0,0,0,66,433,1,0,0,0,68,
		437,1,0,0,0,70,441,1,0,0,0,72,443,1,0,0,0,74,445,1,0,0,0,76,452,1,0,0,
		0,78,454,1,0,0,0,80,456,1,0,0,0,82,464,1,0,0,0,84,466,1,0,0,0,86,475,1,
		0,0,0,88,484,1,0,0,0,90,488,1,0,0,0,92,497,1,0,0,0,94,499,1,0,0,0,96,501,
		1,0,0,0,98,509,1,0,0,0,100,511,1,0,0,0,102,526,1,0,0,0,104,106,3,2,1,0,
		105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,110,
		1,0,0,0,109,107,1,0,0,0,110,111,5,0,0,1,111,1,1,0,0,0,112,119,3,20,10,
		0,113,119,3,22,11,0,114,119,3,42,21,0,115,119,3,8,4,0,116,119,3,40,20,
		0,117,119,3,52,26,0,118,112,1,0,0,0,118,113,1,0,0,0,118,114,1,0,0,0,118,
		115,1,0,0,0,118,116,1,0,0,0,118,117,1,0,0,0,119,3,1,0,0,0,120,121,3,6,
		3,0,121,122,5,3,0,0,122,135,1,0,0,0,123,135,3,30,15,0,124,135,3,32,16,
		0,125,135,3,46,23,0,126,135,3,34,17,0,127,135,3,54,27,0,128,135,3,26,13,
		0,129,135,3,44,22,0,130,135,3,50,25,0,131,135,3,60,30,0,132,135,3,48,24,
		0,133,135,3,94,47,0,134,120,1,0,0,0,134,123,1,0,0,0,134,124,1,0,0,0,134,
		125,1,0,0,0,134,126,1,0,0,0,134,127,1,0,0,0,134,128,1,0,0,0,134,129,1,
		0,0,0,134,130,1,0,0,0,134,131,1,0,0,0,134,132,1,0,0,0,134,133,1,0,0,0,
		135,5,1,0,0,0,136,143,3,10,5,0,137,143,3,12,6,0,138,143,3,18,9,0,139,143,
		3,16,8,0,140,143,3,14,7,0,141,143,3,38,19,0,142,136,1,0,0,0,142,137,1,
		0,0,0,142,138,1,0,0,0,142,139,1,0,0,0,142,140,1,0,0,0,142,141,1,0,0,0,
		143,7,1,0,0,0,144,145,5,70,0,0,145,157,5,76,0,0,146,147,5,4,0,0,147,152,
		3,62,31,0,148,149,5,12,0,0,149,151,3,62,31,0,150,148,1,0,0,0,151,154,1,
		0,0,0,152,153,1,0,0,0,152,150,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,
		155,156,5,5,0,0,156,158,1,0,0,0,157,146,1,0,0,0,157,158,1,0,0,0,158,159,
		1,0,0,0,159,160,3,84,42,0,160,9,1,0,0,0,161,162,5,76,0,0,162,163,3,78,
		39,0,163,164,3,62,31,0,164,11,1,0,0,0,165,166,5,76,0,0,166,167,5,6,0,0,
		167,168,3,62,31,0,168,169,5,7,0,0,169,13,1,0,0,0,170,171,5,63,0,0,171,
		172,5,76,0,0,172,173,5,11,0,0,173,174,3,62,31,0,174,15,1,0,0,0,175,176,
		3,62,31,0,176,177,5,16,0,0,177,178,3,18,9,0,178,17,1,0,0,0,179,180,5,76,
		0,0,180,189,5,4,0,0,181,186,3,58,29,0,182,183,5,12,0,0,183,185,3,58,29,
		0,184,182,1,0,0,0,185,188,1,0,0,0,186,187,1,0,0,0,186,184,1,0,0,0,187,
		190,1,0,0,0,188,186,1,0,0,0,189,181,1,0,0,0,189,190,1,0,0,0,190,191,1,
		0,0,0,191,192,5,5,0,0,192,19,1,0,0,0,193,195,3,42,21,0,194,193,1,0,0,0,
		195,198,1,0,0,0,196,197,1,0,0,0,196,194,1,0,0,0,197,199,1,0,0,0,198,196,
		1,0,0,0,199,200,5,66,0,0,200,201,5,76,0,0,201,210,5,4,0,0,202,207,3,56,
		28,0,203,204,5,12,0,0,204,206,3,56,28,0,205,203,1,0,0,0,206,209,1,0,0,
		0,207,208,1,0,0,0,207,205,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,210,
		202,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,5,5,0,0,213,214,3,
		84,42,0,214,21,1,0,0,0,215,216,5,65,0,0,216,217,5,76,0,0,217,226,5,8,0,
		0,218,223,3,24,12,0,219,220,5,12,0,0,220,222,3,24,12,0,221,219,1,0,0,0,
		222,225,1,0,0,0,223,224,1,0,0,0,223,221,1,0,0,0,224,227,1,0,0,0,225,223,
		1,0,0,0,226,218,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,229,5,9,0,
		0,229,23,1,0,0,0,230,233,5,76,0,0,231,232,5,11,0,0,232,234,3,92,46,0,233,
		231,1,0,0,0,233,234,1,0,0,0,234,25,1,0,0,0,235,236,5,59,0,0,236,240,5,
		8,0,0,237,239,3,28,14,0,238,237,1,0,0,0,239,242,1,0,0,0,240,241,1,0,0,
		0,240,238,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,5,9,0,0,244,
		27,1,0,0,0,245,247,5,67,0,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,
		0,0,0,248,249,3,100,50,0,249,250,5,3,0,0,250,29,1,0,0,0,251,252,5,50,0,
		0,252,253,5,4,0,0,253,254,3,62,31,0,254,255,5,5,0,0,255,258,3,84,42,0,
		256,257,5,51,0,0,257,259,3,36,18,0,258,256,1,0,0,0,258,259,1,0,0,0,259,
		31,1,0,0,0,260,261,5,62,0,0,261,262,5,4,0,0,262,263,3,62,31,0,263,264,
		5,5,0,0,264,265,3,84,42,0,265,33,1,0,0,0,266,267,5,58,0,0,267,269,5,4,
		0,0,268,270,3,6,3,0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,
		273,5,3,0,0,272,274,3,62,31,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,
		1,0,0,0,275,277,5,3,0,0,276,278,3,6,3,0,277,276,1,0,0,0,277,278,1,0,0,
		0,278,279,1,0,0,0,279,280,5,5,0,0,280,281,3,84,42,0,281,35,1,0,0,0,282,
		285,3,84,42,0,283,285,3,30,15,0,284,282,1,0,0,0,284,283,1,0,0,0,285,37,
		1,0,0,0,286,287,5,76,0,0,287,288,3,80,40,0,288,39,1,0,0,0,289,301,5,64,
		0,0,290,291,5,8,0,0,291,296,5,76,0,0,292,293,5,12,0,0,293,295,5,76,0,0,
		294,292,1,0,0,0,295,298,1,0,0,0,296,297,1,0,0,0,296,294,1,0,0,0,297,299,
		1,0,0,0,298,296,1,0,0,0,299,302,5,9,0,0,300,302,3,90,45,0,301,290,1,0,
		0,0,301,300,1,0,0,0,302,303,1,0,0,0,303,304,5,71,0,0,304,305,5,77,0,0,
		305,306,5,3,0,0,306,41,1,0,0,0,307,308,5,23,0,0,308,321,5,76,0,0,309,318,
		5,4,0,0,310,315,3,92,46,0,311,312,5,12,0,0,312,314,3,92,46,0,313,311,1,
		0,0,0,314,317,1,0,0,0,315,316,1,0,0,0,315,313,1,0,0,0,316,319,1,0,0,0,
		317,315,1,0,0,0,318,310,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,322,
		5,5,0,0,321,309,1,0,0,0,321,322,1,0,0,0,322,43,1,0,0,0,323,324,5,67,0,
		0,324,325,3,62,31,0,325,326,5,3,0,0,326,45,1,0,0,0,327,328,5,69,0,0,328,
		329,5,4,0,0,329,330,3,62,31,0,330,331,5,5,0,0,331,332,3,84,42,0,332,47,
		1,0,0,0,333,334,5,68,0,0,334,335,5,77,0,0,335,336,5,3,0,0,336,49,1,0,0,
		0,337,338,5,54,0,0,338,339,5,3,0,0,339,51,1,0,0,0,340,341,5,72,0,0,341,
		342,5,77,0,0,342,343,5,3,0,0,343,53,1,0,0,0,344,345,5,61,0,0,345,346,5,
		4,0,0,346,347,3,62,31,0,347,348,5,5,0,0,348,349,3,86,43,0,349,55,1,0,0,
		0,350,353,5,76,0,0,351,352,5,15,0,0,352,354,3,98,49,0,353,351,1,0,0,0,
		353,354,1,0,0,0,354,57,1,0,0,0,355,356,5,76,0,0,356,358,5,15,0,0,357,355,
		1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,3,62,31,0,360,59,1,0,0,
		0,361,362,5,56,0,0,362,363,5,3,0,0,363,61,1,0,0,0,364,365,6,31,-1,0,365,
		391,3,92,46,0,366,391,5,76,0,0,367,391,3,18,9,0,368,377,5,6,0,0,369,374,
		3,62,31,0,370,371,5,12,0,0,371,373,3,62,31,0,372,370,1,0,0,0,373,376,1,
		0,0,0,374,375,1,0,0,0,374,372,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,
		377,369,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,391,5,7,0,0,380,381,
		5,4,0,0,381,382,3,62,31,0,382,383,5,5,0,0,383,391,1,0,0,0,384,385,5,13,
		0,0,385,391,3,62,31,10,386,387,3,70,35,0,387,388,3,62,31,8,388,391,1,0,
		0,0,389,391,3,100,50,0,390,364,1,0,0,0,390,366,1,0,0,0,390,367,1,0,0,0,
		390,368,1,0,0,0,390,380,1,0,0,0,390,384,1,0,0,0,390,386,1,0,0,0,390,389,
		1,0,0,0,391,428,1,0,0,0,392,393,10,7,0,0,393,394,3,76,38,0,394,395,3,62,
		31,8,395,427,1,0,0,0,396,397,10,6,0,0,397,398,3,64,32,0,398,399,3,62,31,
		7,399,427,1,0,0,0,400,401,10,5,0,0,401,402,3,70,35,0,402,403,3,62,31,6,
		403,427,1,0,0,0,404,405,10,4,0,0,405,406,3,72,36,0,406,407,3,62,31,5,407,
		427,1,0,0,0,408,409,10,3,0,0,409,410,3,74,37,0,410,411,3,62,31,4,411,427,
		1,0,0,0,412,413,10,2,0,0,413,414,5,17,0,0,414,415,3,62,31,0,415,416,5,
		15,0,0,416,417,3,62,31,3,417,427,1,0,0,0,418,419,10,13,0,0,419,420,5,16,
		0,0,420,427,3,18,9,0,421,422,10,9,0,0,422,423,5,6,0,0,423,424,3,62,31,
		0,424,425,5,7,0,0,425,427,1,0,0,0,426,392,1,0,0,0,426,396,1,0,0,0,426,
		400,1,0,0,0,426,404,1,0,0,0,426,408,1,0,0,0,426,412,1,0,0,0,426,418,1,
		0,0,0,426,421,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,
		429,63,1,0,0,0,430,428,1,0,0,0,431,432,7,0,0,0,432,65,1,0,0,0,433,434,
		5,39,0,0,434,435,5,39,0,0,435,436,4,33,8,1,436,67,1,0,0,0,437,438,5,38,
		0,0,438,439,5,38,0,0,439,440,4,34,9,1,440,69,1,0,0,0,441,442,7,1,0,0,442,
		71,1,0,0,0,443,444,7,2,0,0,444,73,1,0,0,0,445,446,7,3,0,0,446,75,1,0,0,
		0,447,453,5,34,0,0,448,453,5,35,0,0,449,453,5,33,0,0,450,453,3,66,33,0,
		451,453,3,68,34,0,452,447,1,0,0,0,452,448,1,0,0,0,452,449,1,0,0,0,452,
		450,1,0,0,0,452,451,1,0,0,0,453,77,1,0,0,0,454,455,7,4,0,0,455,79,1,0,
		0,0,456,457,7,5,0,0,457,81,1,0,0,0,458,459,5,60,0,0,459,460,3,92,46,0,
		460,461,5,15,0,0,461,462,3,84,42,0,462,465,1,0,0,0,463,465,3,88,44,0,464,
		458,1,0,0,0,464,463,1,0,0,0,465,83,1,0,0,0,466,470,5,8,0,0,467,469,3,4,
		2,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,
		473,1,0,0,0,472,470,1,0,0,0,473,474,5,9,0,0,474,85,1,0,0,0,475,479,5,8,
		0,0,476,478,3,82,41,0,477,476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,
		479,480,1,0,0,0,480,482,1,0,0,0,481,479,1,0,0,0,482,483,5,9,0,0,483,87,
		1,0,0,0,484,485,5,55,0,0,485,486,5,15,0,0,486,487,3,84,42,0,487,89,1,0,
		0,0,488,491,5,25,0,0,489,490,5,57,0,0,490,492,5,76,0,0,491,489,1,0,0,0,
		491,492,1,0,0,0,492,91,1,0,0,0,493,498,5,75,0,0,494,498,5,77,0,0,495,498,
		3,96,48,0,496,498,5,78,0,0,497,493,1,0,0,0,497,494,1,0,0,0,497,495,1,0,
		0,0,497,496,1,0,0,0,498,93,1,0,0,0,499,500,5,21,0,0,500,95,1,0,0,0,501,
		502,7,6,0,0,502,97,1,0,0,0,503,510,7,7,0,0,504,505,5,74,0,0,505,506,5,
		39,0,0,506,507,3,98,49,0,507,508,5,38,0,0,508,510,1,0,0,0,509,503,1,0,
		0,0,509,504,1,0,0,0,510,99,1,0,0,0,511,515,5,10,0,0,512,514,3,102,51,0,
		513,512,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,518,
		1,0,0,0,517,515,1,0,0,0,518,519,5,82,0,0,519,101,1,0,0,0,520,527,5,80,
		0,0,521,527,5,81,0,0,522,523,5,79,0,0,523,524,3,62,31,0,524,525,5,9,0,
		0,525,527,1,0,0,0,526,520,1,0,0,0,526,521,1,0,0,0,526,522,1,0,0,0,527,
		103,1,0,0,0,42,107,118,134,142,152,157,186,189,196,207,210,223,226,233,
		240,246,258,269,273,277,284,296,301,315,318,321,353,357,374,377,390,426,
		428,452,464,470,479,491,497,509,515,526
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
