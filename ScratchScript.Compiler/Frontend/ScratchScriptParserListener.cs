//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Resources/Grammar/ScratchScriptParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ScratchScriptParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IScratchScriptParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] ScratchScriptParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] ScratchScriptParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.topLevelStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTopLevelStatement([NotNull] ScratchScriptParser.TopLevelStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.topLevelStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTopLevelStatement([NotNull] ScratchScriptParser.TopLevelStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLine([NotNull] ScratchScriptParser.LineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLine([NotNull] ScratchScriptParser.LineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] ScratchScriptParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] ScratchScriptParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.eventStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEventStatement([NotNull] ScratchScriptParser.EventStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.eventStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEventStatement([NotNull] ScratchScriptParser.EventStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentStatement([NotNull] ScratchScriptParser.AssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentStatement([NotNull] ScratchScriptParser.AssignmentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.listAssignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListAssignmentStatement([NotNull] ScratchScriptParser.ListAssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.listAssignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListAssignmentStatement([NotNull] ScratchScriptParser.ListAssignmentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationStatement([NotNull] ScratchScriptParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationStatement([NotNull] ScratchScriptParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.memberFunctionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberFunctionCallStatement([NotNull] ScratchScriptParser.MemberFunctionCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.memberFunctionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberFunctionCallStatement([NotNull] ScratchScriptParser.MemberFunctionCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallStatement([NotNull] ScratchScriptParser.FunctionCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallStatement([NotNull] ScratchScriptParser.FunctionCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.functionDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclarationStatement([NotNull] ScratchScriptParser.FunctionDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.functionDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclarationStatement([NotNull] ScratchScriptParser.FunctionDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.enumDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumDeclarationStatement([NotNull] ScratchScriptParser.EnumDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.enumDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumDeclarationStatement([NotNull] ScratchScriptParser.EnumDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.enumEntry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumEntry([NotNull] ScratchScriptParser.EnumEntryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.enumEntry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumEntry([NotNull] ScratchScriptParser.EnumEntryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.irBlockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIrBlockStatement([NotNull] ScratchScriptParser.IrBlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.irBlockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIrBlockStatement([NotNull] ScratchScriptParser.IrBlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.irStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIrStatement([NotNull] ScratchScriptParser.IrStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.irStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIrStatement([NotNull] ScratchScriptParser.IrStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] ScratchScriptParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] ScratchScriptParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] ScratchScriptParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] ScratchScriptParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] ScratchScriptParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] ScratchScriptParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.elseIfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatement([NotNull] ScratchScriptParser.ElseIfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.elseIfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatement([NotNull] ScratchScriptParser.ElseIfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.postIncrementStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostIncrementStatement([NotNull] ScratchScriptParser.PostIncrementStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.postIncrementStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostIncrementStatement([NotNull] ScratchScriptParser.PostIncrementStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportStatement([NotNull] ScratchScriptParser.ImportStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportStatement([NotNull] ScratchScriptParser.ImportStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.attributeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeStatement([NotNull] ScratchScriptParser.AttributeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.attributeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeStatement([NotNull] ScratchScriptParser.AttributeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] ScratchScriptParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] ScratchScriptParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.repeatStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepeatStatement([NotNull] ScratchScriptParser.RepeatStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.repeatStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepeatStatement([NotNull] ScratchScriptParser.RepeatStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowStatement([NotNull] ScratchScriptParser.ThrowStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowStatement([NotNull] ScratchScriptParser.ThrowStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] ScratchScriptParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] ScratchScriptParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.namespaceStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespaceStatement([NotNull] ScratchScriptParser.NamespaceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.namespaceStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespaceStatement([NotNull] ScratchScriptParser.NamespaceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] ScratchScriptParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] ScratchScriptParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.typedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypedIdentifier([NotNull] ScratchScriptParser.TypedIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.typedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypedIdentifier([NotNull] ScratchScriptParser.TypedIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.functionArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionArgument([NotNull] ScratchScriptParser.FunctionArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.functionArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionArgument([NotNull] ScratchScriptParser.FunctionArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.debuggerStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDebuggerStatement([NotNull] ScratchScriptParser.DebuggerStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.debuggerStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDebuggerStatement([NotNull] ScratchScriptParser.DebuggerStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>interpolatedStringExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterpolatedStringExpression([NotNull] ScratchScriptParser.InterpolatedStringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>interpolatedStringExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterpolatedStringExpression([NotNull] ScratchScriptParser.InterpolatedStringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantExpression([NotNull] ScratchScriptParser.ConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantExpression([NotNull] ScratchScriptParser.ConstantExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryBitwiseExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryBitwiseExpression([NotNull] ScratchScriptParser.BinaryBitwiseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryBitwiseExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryBitwiseExpression([NotNull] ScratchScriptParser.BinaryBitwiseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] ScratchScriptParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] ScratchScriptParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] ScratchScriptParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] ScratchScriptParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryMultiplyExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryMultiplyExpression([NotNull] ScratchScriptParser.BinaryMultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryMultiplyExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryMultiplyExpression([NotNull] ScratchScriptParser.BinaryMultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryAddExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryAddExpression([NotNull] ScratchScriptParser.UnaryAddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryAddExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryAddExpression([NotNull] ScratchScriptParser.UnaryAddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayInitializeExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayInitializeExpression([NotNull] ScratchScriptParser.ArrayInitializeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayInitializeExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayInitializeExpression([NotNull] ScratchScriptParser.ArrayInitializeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayAccessExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAccessExpression([NotNull] ScratchScriptParser.ArrayAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayAccessExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAccessExpression([NotNull] ScratchScriptParser.ArrayAccessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] ScratchScriptParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] ScratchScriptParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryBooleanExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryBooleanExpression([NotNull] ScratchScriptParser.BinaryBooleanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryBooleanExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryBooleanExpression([NotNull] ScratchScriptParser.BinaryBooleanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] ScratchScriptParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] ScratchScriptParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryCompareExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryCompareExpression([NotNull] ScratchScriptParser.BinaryCompareExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryCompareExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryCompareExpression([NotNull] ScratchScriptParser.BinaryCompareExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] ScratchScriptParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] ScratchScriptParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>memberFunctionCallExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberFunctionCallExpression([NotNull] ScratchScriptParser.MemberFunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>memberFunctionCallExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberFunctionCallExpression([NotNull] ScratchScriptParser.MemberFunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryAddExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryAddExpression([NotNull] ScratchScriptParser.BinaryAddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryAddExpression</c>
	/// labeled alternative in <see cref="ScratchScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryAddExpression([NotNull] ScratchScriptParser.BinaryAddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.multiplyOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyOperators([NotNull] ScratchScriptParser.MultiplyOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.multiplyOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyOperators([NotNull] ScratchScriptParser.MultiplyOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.leftShift"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLeftShift([NotNull] ScratchScriptParser.LeftShiftContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.leftShift"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLeftShift([NotNull] ScratchScriptParser.LeftShiftContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.rightShift"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRightShift([NotNull] ScratchScriptParser.RightShiftContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.rightShift"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRightShift([NotNull] ScratchScriptParser.RightShiftContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.addOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddOperators([NotNull] ScratchScriptParser.AddOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.addOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddOperators([NotNull] ScratchScriptParser.AddOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.compareOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompareOperators([NotNull] ScratchScriptParser.CompareOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.compareOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompareOperators([NotNull] ScratchScriptParser.CompareOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.booleanOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanOperators([NotNull] ScratchScriptParser.BooleanOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.booleanOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanOperators([NotNull] ScratchScriptParser.BooleanOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.bitwiseOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseOperators([NotNull] ScratchScriptParser.BitwiseOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.bitwiseOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseOperators([NotNull] ScratchScriptParser.BitwiseOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.assignmentOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperators([NotNull] ScratchScriptParser.AssignmentOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.assignmentOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperators([NotNull] ScratchScriptParser.AssignmentOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.postIncrementOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostIncrementOperators([NotNull] ScratchScriptParser.PostIncrementOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.postIncrementOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostIncrementOperators([NotNull] ScratchScriptParser.PostIncrementOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.case"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCase([NotNull] ScratchScriptParser.CaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.case"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCase([NotNull] ScratchScriptParser.CaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] ScratchScriptParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] ScratchScriptParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.switchBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchBlock([NotNull] ScratchScriptParser.SwitchBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.switchBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchBlock([NotNull] ScratchScriptParser.SwitchBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.defaultCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultCase([NotNull] ScratchScriptParser.DefaultCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.defaultCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultCase([NotNull] ScratchScriptParser.DefaultCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.importAll"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportAll([NotNull] ScratchScriptParser.ImportAllContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.importAll"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportAll([NotNull] ScratchScriptParser.ImportAllContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] ScratchScriptParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] ScratchScriptParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment([NotNull] ScratchScriptParser.CommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment([NotNull] ScratchScriptParser.CommentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.boolean"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolean([NotNull] ScratchScriptParser.BooleanContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.boolean"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolean([NotNull] ScratchScriptParser.BooleanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>regularType</c>
	/// labeled alternative in <see cref="ScratchScriptParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegularType([NotNull] ScratchScriptParser.RegularTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>regularType</c>
	/// labeled alternative in <see cref="ScratchScriptParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegularType([NotNull] ScratchScriptParser.RegularTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>listType</c>
	/// labeled alternative in <see cref="ScratchScriptParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] ScratchScriptParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>listType</c>
	/// labeled alternative in <see cref="ScratchScriptParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] ScratchScriptParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.interpolatedString"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterpolatedString([NotNull] ScratchScriptParser.InterpolatedStringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.interpolatedString"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterpolatedString([NotNull] ScratchScriptParser.InterpolatedStringContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ScratchScriptParser.interpolatedStringPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterpolatedStringPart([NotNull] ScratchScriptParser.InterpolatedStringPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ScratchScriptParser.interpolatedStringPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterpolatedStringPart([NotNull] ScratchScriptParser.InterpolatedStringPartContext context);
}
