//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Resources/Grammar/ScratchIR.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ScratchIRParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, Event=42, DefineType=43, Type=44, NumberType=45, 
		StringType=46, ListType=47, StringNumberType=48, BooleanType=49, WarpIdentifier=50, 
		Hashtag=51, Minus=52, Colon=53, End=54, Whitespace=55, NewLine=56, Number=57, 
		Identifier=58, String=59, Color=60;
	public const int
		RULE_program = 0, RULE_command = 1, RULE_block = 2, RULE_expression = 3, 
		RULE_elseIfStatement = 4, RULE_ifStatement = 5, RULE_callFunctionArgument = 6, 
		RULE_functionArgumentType = 7, RULE_variableIdentifier = 8, RULE_arrayIdentifier = 9, 
		RULE_argumentIdentifier = 10, RULE_constant = 11, RULE_addOperators = 12, 
		RULE_multiplyOperators = 13, RULE_booleanOperators = 14, RULE_compareOperators = 15;
	public static readonly string[] ruleNames = {
		"program", "command", "block", "expression", "elseIfStatement", "ifStatement", 
		"callFunctionArgument", "functionArgumentType", "variableIdentifier", 
		"arrayIdentifier", "argumentIdentifier", "constant", "addOperators", "multiplyOperators", 
		"booleanOperators", "compareOperators"
	};

	private static readonly string[] _LiteralNames = {
		null, "'set'", "'load'", "'while'", "'repeat'", "'call'", "'raw'", "'push'", 
		"'pushat'", "'pop'", "'popat'", "'popall'", "'block'", "'on'", "'flag'", 
		"'define'", "'('", "')'", "'rawshadow'", "'endshadow'", "'!'", "'else'", 
		"'if'", "'i:'", "'f:'", "'var:'", "'arr:'", "'arg:'", "'+'", "'~'", "'*'", 
		"'/'", "'%'", "'&&'", "'||'", "'^'", "'=='", "'!='", "'>'", "'>='", "'<'", 
		"'<='", "'start'", null, null, "':number'", "':string'", "':list'", "':sn'", 
		"':boolean'", "':w'", "'#'", "'-'", "':'", "'end'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "Event", "DefineType", "Type", "NumberType", 
		"StringType", "ListType", "StringNumberType", "BooleanType", "WarpIdentifier", 
		"Hashtag", "Minus", "Colon", "End", "Whitespace", "NewLine", "Number", 
		"Identifier", "String", "Color"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ScratchIR.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ScratchIRParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ScratchIRParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ScratchIRParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ScratchIRParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 61440L) != 0)) {
				{
				{
				State = 32;
				block();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoadCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(ScratchIRParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public LoadCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterLoadCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitLoadCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PushAtCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PushAtCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPushAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPushAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushAtCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopAllCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public PopAllCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopAllCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopAllCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopAllCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PushCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PushCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPushCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPushCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public WhileCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterWhileCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitWhileCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public PopCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IfCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterIfCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitIfCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public RepeatCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRepeatCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRepeatCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public CallCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCallCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCallCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterSetCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitSetCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopAtCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PopAtCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopAtCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RawCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionArgumentContext[] callFunctionArgument() {
			return GetRuleContexts<CallFunctionArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionArgumentContext callFunctionArgument(int i) {
			return GetRuleContext<CallFunctionArgumentContext>(i);
		}
		public RawCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRawCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRawCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			int _alt;
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new SetCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				Match(T__0);
				State = 41;
				variableIdentifier();
				State = 42;
				expression();
				}
				break;
			case T__1:
				_localctx = new LoadCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 44;
				Match(T__1);
				State = 45;
				Match(Type);
				State = 46;
				Match(Identifier);
				}
				break;
			case T__2:
				_localctx = new WhileCommandContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 47;
				Match(T__2);
				State = 48;
				expression();
				State = 52;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 49;
						command();
						}
						} 
					}
					State = 54;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				State = 55;
				Match(End);
				}
				break;
			case T__3:
				_localctx = new RepeatCommandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				Match(T__3);
				State = 58;
				expression();
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 59;
						command();
						}
						} 
					}
					State = 64;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				State = 65;
				Match(End);
				}
				break;
			case T__21:
				_localctx = new IfCommandContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 67;
				ifStatement();
				}
				break;
			case T__4:
				_localctx = new CallCommandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 68;
				Match(T__4);
				State = 69;
				Match(Identifier);
				}
				break;
			case T__5:
				_localctx = new RawCommandContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 70;
				Match(T__5);
				State = 71;
				Match(Identifier);
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 72;
						callFunctionArgument();
						}
						} 
					}
					State = 77;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			case T__6:
				_localctx = new PushCommandContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 78;
				Match(T__6);
				State = 79;
				Match(Identifier);
				State = 80;
				expression();
				}
				break;
			case T__7:
				_localctx = new PushAtCommandContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 81;
				Match(T__7);
				State = 82;
				Match(Identifier);
				State = 83;
				expression();
				State = 84;
				expression();
				}
				break;
			case T__8:
				_localctx = new PopCommandContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 86;
				Match(T__8);
				State = 87;
				Match(Identifier);
				}
				break;
			case T__9:
				_localctx = new PopAtCommandContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 88;
				Match(T__9);
				State = 89;
				Match(Identifier);
				State = 90;
				expression();
				}
				break;
			case T__10:
				_localctx = new PopAllCommandContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 91;
				Match(T__10);
				State = 92;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionBlockContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WarpIdentifier() { return GetToken(ScratchIRParser.WarpIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public FunctionBlockContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlagTopLevelStatementContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public FlagTopLevelStatementContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterFlagTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitFlagTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlagTopLevelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefineStatementContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DefineType() { return GetToken(ScratchIRParser.DefineType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public DefineStatementContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterDefineStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitDefineStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EventBlockContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Event() { return GetToken(ScratchIRParser.Event, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public EventBlockContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterEventBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitEventBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			int _alt;
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				_localctx = new FunctionBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				Match(T__11);
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WarpIdentifier) {
					{
					State = 96;
					Match(WarpIdentifier);
					}
				}

				State = 99;
				Match(Identifier);
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 100;
						command();
						}
						} 
					}
					State = 105;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				State = 106;
				Match(End);
				}
				break;
			case T__12:
				_localctx = new EventBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				Match(T__12);
				State = 108;
				Match(Event);
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 109;
						command();
						}
						} 
					}
					State = 114;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 115;
				Match(End);
				}
				break;
			case T__13:
				_localctx = new FlagTopLevelStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 116;
				Match(T__13);
				State = 117;
				Match(Identifier);
				}
				break;
			case T__14:
				_localctx = new DefineStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 118;
				Match(T__14);
				State = 119;
				Match(DefineType);
				State = 120;
				Match(Identifier);
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 121;
						constant();
						}
						} 
					}
					State = 126;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(ScratchIRParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterListAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitListAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgumentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentIdentifierContext argumentIdentifier() {
			return GetRuleContext<ArgumentIdentifierContext>(0);
		}
		public ArgumentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterArgumentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitArgumentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIdentifierContext arrayIdentifier() {
			return GetRuleContext<ArrayIdentifierContext>(0);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RawShadowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionArgumentContext[] callFunctionArgument() {
			return GetRuleContexts<CallFunctionArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionArgumentContext callFunctionArgument(int i) {
			return GetRuleContext<CallFunctionArgumentContext>(i);
		}
		public RawShadowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRawShadowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRawShadowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawShadowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOperatorsContext booleanOperators() {
			return GetRuleContext<BooleanOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryBooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryCompareExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorsContext compareOperators() {
			return GetRuleContext<CompareOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryCompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryMultiplyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyOperatorsContext multiplyOperators() {
			return GetRuleContext<MultiplyOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryMultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			int _alt;
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
			case String:
			case Color:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				constant();
				}
				break;
			case T__24:
				_localctx = new VariableExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				variableIdentifier();
				}
				break;
			case T__25:
				_localctx = new ArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 131;
				arrayIdentifier();
				}
				break;
			case T__26:
				_localctx = new ArgumentExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 132;
				argumentIdentifier();
				}
				break;
			case T__15:
				_localctx = new ParenthesizedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 133;
				Match(T__15);
				State = 134;
				expression();
				State = 135;
				Match(T__16);
				}
				break;
			case T__27:
			case T__28:
			case Minus:
				_localctx = new BinaryAddExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 137;
				addOperators();
				State = 138;
				expression();
				State = 139;
				expression();
				}
				break;
			case T__29:
			case T__30:
			case T__31:
				_localctx = new BinaryMultiplyExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 141;
				multiplyOperators();
				State = 142;
				expression();
				State = 143;
				expression();
				}
				break;
			case T__32:
			case T__33:
			case T__34:
				_localctx = new BinaryBooleanExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 145;
				booleanOperators();
				State = 146;
				expression();
				State = 147;
				expression();
				}
				break;
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
				_localctx = new BinaryCompareExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 149;
				compareOperators();
				State = 150;
				expression();
				State = 151;
				expression();
				}
				break;
			case T__17:
				_localctx = new RawShadowExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 153;
				Match(T__17);
				State = 154;
				Match(Identifier);
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 155;
						callFunctionArgument();
						}
						} 
					}
					State = 160;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 161;
				Match(T__18);
				}
				break;
			case T__19:
				_localctx = new NotExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 162;
				Match(T__19);
				State = 163;
				expression();
				}
				break;
			case Identifier:
				_localctx = new ListAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 164;
				Match(Identifier);
				State = 165;
				Match(Hashtag);
				State = 166;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfStatement);
		try {
			int _alt;
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				Match(T__20);
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 170;
						command();
						}
						} 
					}
					State = 175;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 176;
				Match(End);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(T__21);
			State = 181;
			expression();
			State = 185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 182;
					command();
					}
					} 
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 188;
			Match(End);
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 189;
				elseIfStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallFunctionArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentTypeContext functionArgumentType() {
			return GetRuleContext<FunctionArgumentTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchIRParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallFunctionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callFunctionArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCallFunctionArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCallFunctionArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFunctionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallFunctionArgumentContext callFunctionArgument() {
		CallFunctionArgumentContext _localctx = new CallFunctionArgumentContext(Context, State);
		EnterRule(_localctx, 12, RULE_callFunctionArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			functionArgumentType();
			State = 193;
			Match(Identifier);
			State = 194;
			Match(Colon);
			State = 195;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentTypeContext : ParserRuleContext {
		public FunctionArgumentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgumentType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterFunctionArgumentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitFunctionArgumentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgumentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentTypeContext functionArgumentType() {
		FunctionArgumentTypeContext _localctx = new FunctionArgumentTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionArgumentType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = TokenStream.LA(1);
			if ( !(_la==T__22 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public VariableIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentifierContext variableIdentifier() {
		VariableIdentifierContext _localctx = new VariableIdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(T__24);
			State = 200;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public ArrayIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterArrayIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitArrayIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIdentifierContext arrayIdentifier() {
		ArrayIdentifierContext _localctx = new ArrayIdentifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_arrayIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(T__25);
			State = 203;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public ArgumentIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterArgumentIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitArgumentIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentIdentifierContext argumentIdentifier() {
		ArgumentIdentifierContext _localctx = new ArgumentIdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_argumentIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(T__26);
			State = 206;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(ScratchIRParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchIRParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(ScratchIRParser.Color, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 22, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1873497444986126336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(ScratchIRParser.Minus, 0); }
		public AddOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorsContext addOperators() {
		AddOperatorsContext _localctx = new AddOperatorsContext(Context, State);
		EnterRule(_localctx, 24, RULE_addOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4503600432676864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyOperatorsContext : ParserRuleContext {
		public MultiplyOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorsContext multiplyOperators() {
		MultiplyOperatorsContext _localctx = new MultiplyOperatorsContext(Context, State);
		EnterRule(_localctx, 26, RULE_multiplyOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7516192768L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperatorsContext : ParserRuleContext {
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorsContext booleanOperators() {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(Context, State);
		EnterRule(_localctx, 28, RULE_booleanOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorsContext : ParserRuleContext {
		public CompareOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorsContext compareOperators() {
		CompareOperatorsContext _localctx = new CompareOperatorsContext(Context, State);
		EnterRule(_localctx, 30, RULE_compareOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4329327034368L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,60,219,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,5,1,51,8,1,10,1,12,1,54,9,1,1,1,1,1,1,1,1,1,1,1,5,
		1,61,8,1,10,1,12,1,64,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,74,8,1,10,
		1,12,1,77,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,3,1,94,8,1,1,2,1,2,3,2,98,8,2,1,2,1,2,5,2,102,8,2,10,2,12,2,105,9,
		2,1,2,1,2,1,2,1,2,5,2,111,8,2,10,2,12,2,114,9,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,5,2,123,8,2,10,2,12,2,126,9,2,3,2,128,8,2,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,5,3,157,8,3,10,3,12,3,160,9,3,1,3,1,3,1,3,1,3,1,3,1,3,
		3,3,168,8,3,1,4,1,4,5,4,172,8,4,10,4,12,4,175,9,4,1,4,1,4,3,4,179,8,4,
		1,5,1,5,1,5,5,5,184,8,5,10,5,12,5,187,9,5,1,5,1,5,3,5,191,8,5,1,6,1,6,
		1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
		12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,9,52,62,75,103,112,124,158,
		173,185,0,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,6,1,0,23,24,
		2,0,57,57,59,60,2,0,28,29,52,52,1,0,30,32,1,0,33,35,1,0,36,41,240,0,35,
		1,0,0,0,2,93,1,0,0,0,4,127,1,0,0,0,6,167,1,0,0,0,8,178,1,0,0,0,10,180,
		1,0,0,0,12,192,1,0,0,0,14,197,1,0,0,0,16,199,1,0,0,0,18,202,1,0,0,0,20,
		205,1,0,0,0,22,208,1,0,0,0,24,210,1,0,0,0,26,212,1,0,0,0,28,214,1,0,0,
		0,30,216,1,0,0,0,32,34,3,4,2,0,33,32,1,0,0,0,34,37,1,0,0,0,35,33,1,0,0,
		0,35,36,1,0,0,0,36,38,1,0,0,0,37,35,1,0,0,0,38,39,5,0,0,1,39,1,1,0,0,0,
		40,41,5,1,0,0,41,42,3,16,8,0,42,43,3,6,3,0,43,94,1,0,0,0,44,45,5,2,0,0,
		45,46,5,44,0,0,46,94,5,58,0,0,47,48,5,3,0,0,48,52,3,6,3,0,49,51,3,2,1,
		0,50,49,1,0,0,0,51,54,1,0,0,0,52,53,1,0,0,0,52,50,1,0,0,0,53,55,1,0,0,
		0,54,52,1,0,0,0,55,56,5,54,0,0,56,94,1,0,0,0,57,58,5,4,0,0,58,62,3,6,3,
		0,59,61,3,2,1,0,60,59,1,0,0,0,61,64,1,0,0,0,62,63,1,0,0,0,62,60,1,0,0,
		0,63,65,1,0,0,0,64,62,1,0,0,0,65,66,5,54,0,0,66,94,1,0,0,0,67,94,3,10,
		5,0,68,69,5,5,0,0,69,94,5,58,0,0,70,71,5,6,0,0,71,75,5,58,0,0,72,74,3,
		12,6,0,73,72,1,0,0,0,74,77,1,0,0,0,75,76,1,0,0,0,75,73,1,0,0,0,76,94,1,
		0,0,0,77,75,1,0,0,0,78,79,5,7,0,0,79,80,5,58,0,0,80,94,3,6,3,0,81,82,5,
		8,0,0,82,83,5,58,0,0,83,84,3,6,3,0,84,85,3,6,3,0,85,94,1,0,0,0,86,87,5,
		9,0,0,87,94,5,58,0,0,88,89,5,10,0,0,89,90,5,58,0,0,90,94,3,6,3,0,91,92,
		5,11,0,0,92,94,5,58,0,0,93,40,1,0,0,0,93,44,1,0,0,0,93,47,1,0,0,0,93,57,
		1,0,0,0,93,67,1,0,0,0,93,68,1,0,0,0,93,70,1,0,0,0,93,78,1,0,0,0,93,81,
		1,0,0,0,93,86,1,0,0,0,93,88,1,0,0,0,93,91,1,0,0,0,94,3,1,0,0,0,95,97,5,
		12,0,0,96,98,5,50,0,0,97,96,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,103,
		5,58,0,0,100,102,3,2,1,0,101,100,1,0,0,0,102,105,1,0,0,0,103,104,1,0,0,
		0,103,101,1,0,0,0,104,106,1,0,0,0,105,103,1,0,0,0,106,128,5,54,0,0,107,
		108,5,13,0,0,108,112,5,42,0,0,109,111,3,2,1,0,110,109,1,0,0,0,111,114,
		1,0,0,0,112,113,1,0,0,0,112,110,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,
		0,115,128,5,54,0,0,116,117,5,14,0,0,117,128,5,58,0,0,118,119,5,15,0,0,
		119,120,5,43,0,0,120,124,5,58,0,0,121,123,3,22,11,0,122,121,1,0,0,0,123,
		126,1,0,0,0,124,125,1,0,0,0,124,122,1,0,0,0,125,128,1,0,0,0,126,124,1,
		0,0,0,127,95,1,0,0,0,127,107,1,0,0,0,127,116,1,0,0,0,127,118,1,0,0,0,128,
		5,1,0,0,0,129,168,3,22,11,0,130,168,3,16,8,0,131,168,3,18,9,0,132,168,
		3,20,10,0,133,134,5,16,0,0,134,135,3,6,3,0,135,136,5,17,0,0,136,168,1,
		0,0,0,137,138,3,24,12,0,138,139,3,6,3,0,139,140,3,6,3,0,140,168,1,0,0,
		0,141,142,3,26,13,0,142,143,3,6,3,0,143,144,3,6,3,0,144,168,1,0,0,0,145,
		146,3,28,14,0,146,147,3,6,3,0,147,148,3,6,3,0,148,168,1,0,0,0,149,150,
		3,30,15,0,150,151,3,6,3,0,151,152,3,6,3,0,152,168,1,0,0,0,153,154,5,18,
		0,0,154,158,5,58,0,0,155,157,3,12,6,0,156,155,1,0,0,0,157,160,1,0,0,0,
		158,159,1,0,0,0,158,156,1,0,0,0,159,161,1,0,0,0,160,158,1,0,0,0,161,168,
		5,19,0,0,162,163,5,20,0,0,163,168,3,6,3,0,164,165,5,58,0,0,165,166,5,51,
		0,0,166,168,3,6,3,0,167,129,1,0,0,0,167,130,1,0,0,0,167,131,1,0,0,0,167,
		132,1,0,0,0,167,133,1,0,0,0,167,137,1,0,0,0,167,141,1,0,0,0,167,145,1,
		0,0,0,167,149,1,0,0,0,167,153,1,0,0,0,167,162,1,0,0,0,167,164,1,0,0,0,
		168,7,1,0,0,0,169,173,5,21,0,0,170,172,3,2,1,0,171,170,1,0,0,0,172,175,
		1,0,0,0,173,174,1,0,0,0,173,171,1,0,0,0,174,176,1,0,0,0,175,173,1,0,0,
		0,176,179,5,54,0,0,177,179,3,10,5,0,178,169,1,0,0,0,178,177,1,0,0,0,179,
		9,1,0,0,0,180,181,5,22,0,0,181,185,3,6,3,0,182,184,3,2,1,0,183,182,1,0,
		0,0,184,187,1,0,0,0,185,186,1,0,0,0,185,183,1,0,0,0,186,188,1,0,0,0,187,
		185,1,0,0,0,188,190,5,54,0,0,189,191,3,8,4,0,190,189,1,0,0,0,190,191,1,
		0,0,0,191,11,1,0,0,0,192,193,3,14,7,0,193,194,5,58,0,0,194,195,5,53,0,
		0,195,196,3,6,3,0,196,13,1,0,0,0,197,198,7,0,0,0,198,15,1,0,0,0,199,200,
		5,25,0,0,200,201,5,58,0,0,201,17,1,0,0,0,202,203,5,26,0,0,203,204,5,58,
		0,0,204,19,1,0,0,0,205,206,5,27,0,0,206,207,5,58,0,0,207,21,1,0,0,0,208,
		209,7,1,0,0,209,23,1,0,0,0,210,211,7,2,0,0,211,25,1,0,0,0,212,213,7,3,
		0,0,213,27,1,0,0,0,214,215,7,4,0,0,215,29,1,0,0,0,216,217,7,5,0,0,217,
		31,1,0,0,0,16,35,52,62,75,93,97,103,112,124,127,158,167,173,178,185,190
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
