//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Resources/Grammar/ScratchIR.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ScratchIRParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, Event=40, Type=41, ProcedureType=42, NumberType=43, StringType=44, 
		ListType=45, StringNumberType=46, BooleanType=47, WarpIdentifier=48, StackIndexIdentifier=49, 
		Hashtag=50, Minus=51, Colon=52, End=53, Whitespace=54, NewLine=55, Number=56, 
		Identifier=57, String=58, Color=59;
	public const int
		RULE_program = 0, RULE_command = 1, RULE_block = 2, RULE_expression = 3, 
		RULE_elseIfStatement = 4, RULE_ifStatement = 5, RULE_procedureArgument = 6, 
		RULE_callProcedureArgument = 7, RULE_procedureArgumentType = 8, RULE_variableIdentifier = 9, 
		RULE_arrayIdentifier = 10, RULE_constant = 11, RULE_procedureArgumentTypeDeclaration = 12, 
		RULE_addOperators = 13, RULE_multiplyOperators = 14, RULE_booleanOperators = 15, 
		RULE_compareOperators = 16;
	public static readonly string[] ruleNames = {
		"program", "command", "block", "expression", "elseIfStatement", "ifStatement", 
		"procedureArgument", "callProcedureArgument", "procedureArgumentType", 
		"variableIdentifier", "arrayIdentifier", "constant", "procedureArgumentTypeDeclaration", 
		"addOperators", "multiplyOperators", "booleanOperators", "compareOperators"
	};

	private static readonly string[] _LiteralNames = {
		null, "'set'", "'load'", "'while'", "'repeat'", "'call'", "'raw'", "'push'", 
		"'pushat'", "'pop'", "'popat'", "'popall'", "'proc'", "'on'", "'flag'", 
		"'('", "')'", "'rawshadow'", "'endshadow'", "'!'", "'if'", "'else'", "'i:'", 
		"'f:'", "'var:'", "'arr:'", "'+'", "'~'", "'*'", "'/'", "'%'", "'&&'", 
		"'||'", "'^'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'start'", 
		null, null, "':number'", "':string'", "':list'", "':sn'", "':boolean'", 
		"':w'", "':si:'", "'#'", "'-'", "':'", "'end'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "Event", "Type", "ProcedureType", "NumberType", 
		"StringType", "ListType", "StringNumberType", "BooleanType", "WarpIdentifier", 
		"StackIndexIdentifier", "Hashtag", "Minus", "Colon", "End", "Whitespace", 
		"NewLine", "Number", "Identifier", "String", "Color"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ScratchIR.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ScratchIRParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ScratchIRParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ScratchIRParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ScratchIRParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) {
				{
				{
				State = 34;
				block();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoadCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(ScratchIRParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public LoadCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterLoadCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitLoadCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PushAtCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PushAtCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPushAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPushAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushAtCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopAllCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public PopAllCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopAllCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopAllCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopAllCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PushCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PushCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPushCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPushCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public WhileCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterWhileCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitWhileCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public PopCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IfCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterIfCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitIfCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public RepeatCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRepeatCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRepeatCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public CallCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCallCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCallCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterSetCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitSetCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopAtCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PopAtCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopAtCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RawCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext[] callProcedureArgument() {
			return GetRuleContexts<CallProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext callProcedureArgument(int i) {
			return GetRuleContext<CallProcedureArgumentContext>(i);
		}
		public RawCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRawCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRawCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			int _alt;
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new SetCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				Match(T__0);
				State = 43;
				variableIdentifier();
				State = 44;
				expression();
				}
				break;
			case T__1:
				_localctx = new LoadCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				Match(T__1);
				State = 47;
				Match(Type);
				State = 48;
				Match(Identifier);
				}
				break;
			case T__2:
				_localctx = new WhileCommandContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				Match(T__2);
				State = 50;
				expression();
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 51;
						command();
						}
						} 
					}
					State = 56;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				State = 57;
				Match(End);
				}
				break;
			case T__3:
				_localctx = new RepeatCommandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 59;
				Match(T__3);
				State = 60;
				expression();
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 61;
						command();
						}
						} 
					}
					State = 66;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				State = 67;
				Match(End);
				}
				break;
			case T__19:
				_localctx = new IfCommandContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				ifStatement();
				}
				break;
			case T__4:
				_localctx = new CallCommandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 70;
				Match(T__4);
				State = 71;
				Match(Identifier);
				}
				break;
			case T__5:
				_localctx = new RawCommandContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 72;
				Match(T__5);
				State = 73;
				Match(Identifier);
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 74;
						callProcedureArgument();
						}
						} 
					}
					State = 79;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			case T__6:
				_localctx = new PushCommandContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 80;
				Match(T__6);
				State = 81;
				Match(Identifier);
				State = 82;
				expression();
				}
				break;
			case T__7:
				_localctx = new PushAtCommandContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 83;
				Match(T__7);
				State = 84;
				Match(Identifier);
				State = 85;
				expression();
				State = 86;
				expression();
				}
				break;
			case T__8:
				_localctx = new PopCommandContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 88;
				Match(T__8);
				State = 89;
				Match(Identifier);
				}
				break;
			case T__9:
				_localctx = new PopAtCommandContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 90;
				Match(T__9);
				State = 91;
				Match(Identifier);
				State = 92;
				expression();
				}
				break;
			case T__10:
				_localctx = new PopAllCommandContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 93;
				Match(T__10);
				State = 94;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProcedureBlockContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WarpIdentifier() { return GetToken(ScratchIRParser.WarpIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentContext[] procedureArgument() {
			return GetRuleContexts<ProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentContext procedureArgument(int i) {
			return GetRuleContext<ProcedureArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ProcedureBlockContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProcedureBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProcedureBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlagTopLevelStatementContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public FlagTopLevelStatementContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterFlagTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitFlagTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlagTopLevelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EventBlockContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Event() { return GetToken(ScratchIRParser.Event, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public EventBlockContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterEventBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitEventBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			int _alt;
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				_localctx = new ProcedureBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				Match(T__11);
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WarpIdentifier) {
					{
					State = 98;
					Match(WarpIdentifier);
					}
				}

				State = 101;
				Match(Identifier);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Identifier) {
					{
					{
					State = 102;
					procedureArgument();
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 108;
						command();
						}
						} 
					}
					State = 113;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 114;
				Match(End);
				}
				break;
			case T__12:
				_localctx = new EventBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				Match(T__12);
				State = 116;
				Match(Event);
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 117;
						command();
						}
						} 
					}
					State = 122;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 123;
				Match(End);
				}
				break;
			case T__13:
				_localctx = new FlagTopLevelStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 124;
				Match(T__13);
				State = 125;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(ScratchIRParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterListAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitListAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIdentifierContext arrayIdentifier() {
			return GetRuleContext<ArrayIdentifierContext>(0);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RawShadowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext[] callProcedureArgument() {
			return GetRuleContexts<CallProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext callProcedureArgument(int i) {
			return GetRuleContext<CallProcedureArgumentContext>(i);
		}
		public RawShadowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRawShadowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRawShadowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawShadowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StackIndexExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StackIndexIdentifier() { return GetToken(ScratchIRParser.StackIndexIdentifier, 0); }
		public StackIndexExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterStackIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitStackIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStackIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOperatorsContext booleanOperators() {
			return GetRuleContext<BooleanOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryBooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryCompareExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorsContext compareOperators() {
			return GetRuleContext<CompareOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryCompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryMultiplyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyOperatorsContext multiplyOperators() {
			return GetRuleContext<MultiplyOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryMultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			int _alt;
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
			case String:
			case Color:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				constant();
				}
				break;
			case T__23:
				_localctx = new VariableExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				variableIdentifier();
				}
				break;
			case StackIndexIdentifier:
				_localctx = new StackIndexExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				Match(StackIndexIdentifier);
				}
				break;
			case T__24:
				_localctx = new ArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 131;
				arrayIdentifier();
				}
				break;
			case T__14:
				_localctx = new ParenthesizedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 132;
				Match(T__14);
				State = 133;
				expression();
				State = 134;
				Match(T__15);
				}
				break;
			case T__25:
			case T__26:
			case Minus:
				_localctx = new BinaryAddExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 136;
				addOperators();
				State = 137;
				expression();
				State = 138;
				expression();
				}
				break;
			case T__27:
			case T__28:
			case T__29:
				_localctx = new BinaryMultiplyExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 140;
				multiplyOperators();
				State = 141;
				expression();
				State = 142;
				expression();
				}
				break;
			case T__30:
			case T__31:
			case T__32:
				_localctx = new BinaryBooleanExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 144;
				booleanOperators();
				State = 145;
				expression();
				State = 146;
				expression();
				}
				break;
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
				_localctx = new BinaryCompareExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 148;
				compareOperators();
				State = 149;
				expression();
				State = 150;
				expression();
				}
				break;
			case T__16:
				_localctx = new RawShadowExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 152;
				Match(T__16);
				State = 153;
				Match(Identifier);
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 154;
						callProcedureArgument();
						}
						} 
					}
					State = 159;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 160;
				Match(T__17);
				}
				break;
			case T__18:
				_localctx = new NotExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 161;
				Match(T__18);
				State = 162;
				expression();
				}
				break;
			case Identifier:
				_localctx = new ListAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 163;
				Match(Identifier);
				State = 164;
				Match(Hashtag);
				State = 165;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfStatement);
		try {
			int _alt;
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 168;
						command();
						}
						} 
					}
					State = 173;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 174;
				Match(End);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(T__19);
			State = 179;
			expression();
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 180;
					command();
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 186;
			Match(End);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 187;
				Match(T__20);
				State = 188;
				elseIfStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentTypeDeclarationContext procedureArgumentTypeDeclaration() {
			return GetRuleContext<ProcedureArgumentTypeDeclarationContext>(0);
		}
		public ProcedureArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentContext procedureArgument() {
		ProcedureArgumentContext _localctx = new ProcedureArgumentContext(Context, State);
		EnterRule(_localctx, 12, RULE_procedureArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(Identifier);
			State = 192;
			procedureArgumentTypeDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallProcedureArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentTypeContext procedureArgumentType() {
			return GetRuleContext<ProcedureArgumentTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchIRParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallProcedureArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callProcedureArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCallProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCallProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallProcedureArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallProcedureArgumentContext callProcedureArgument() {
		CallProcedureArgumentContext _localctx = new CallProcedureArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_callProcedureArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			procedureArgumentType();
			State = 195;
			Match(Identifier);
			State = 196;
			Match(Colon);
			State = 197;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentTypeContext : ParserRuleContext {
		public ProcedureArgumentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArgumentType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProcedureArgumentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProcedureArgumentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureArgumentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentTypeContext procedureArgumentType() {
		ProcedureArgumentTypeContext _localctx = new ProcedureArgumentTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_procedureArgumentType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !(_la==T__21 || _la==T__22) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public VariableIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentifierContext variableIdentifier() {
		VariableIdentifierContext _localctx = new VariableIdentifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(T__23);
			State = 202;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public ArrayIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterArrayIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitArrayIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIdentifierContext arrayIdentifier() {
		ArrayIdentifierContext _localctx = new ArrayIdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_arrayIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(T__24);
			State = 205;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(ScratchIRParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchIRParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(ScratchIRParser.Color, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 22, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 936748722493063168L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ProcedureType() { return GetToken(ScratchIRParser.ProcedureType, 0); }
		public ProcedureArgumentTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArgumentTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProcedureArgumentTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProcedureArgumentTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureArgumentTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentTypeDeclarationContext procedureArgumentTypeDeclaration() {
		ProcedureArgumentTypeDeclarationContext _localctx = new ProcedureArgumentTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_procedureArgumentTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(ProcedureType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(ScratchIRParser.Minus, 0); }
		public AddOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorsContext addOperators() {
		AddOperatorsContext _localctx = new AddOperatorsContext(Context, State);
		EnterRule(_localctx, 26, RULE_addOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251800015011840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyOperatorsContext : ParserRuleContext {
		public MultiplyOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorsContext multiplyOperators() {
		MultiplyOperatorsContext _localctx = new MultiplyOperatorsContext(Context, State);
		EnterRule(_localctx, 28, RULE_multiplyOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperatorsContext : ParserRuleContext {
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorsContext booleanOperators() {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(Context, State);
		EnterRule(_localctx, 30, RULE_booleanOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385536L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorsContext : ParserRuleContext {
		public CompareOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorsContext compareOperators() {
		CompareOperatorsContext _localctx = new CompareOperatorsContext(Context, State);
		EnterRule(_localctx, 32, RULE_compareOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1082331758592L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,59,220,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,53,8,1,10,1,12,1,56,9,1,1,1,1,1,1,1,
		1,1,1,1,5,1,63,8,1,10,1,12,1,66,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
		1,76,8,1,10,1,12,1,79,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,96,8,1,1,2,1,2,3,2,100,8,2,1,2,1,2,5,2,104,8,2,10,
		2,12,2,107,9,2,1,2,5,2,110,8,2,10,2,12,2,113,9,2,1,2,1,2,1,2,1,2,5,2,119,
		8,2,10,2,12,2,122,9,2,1,2,1,2,1,2,3,2,127,8,2,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,5,3,156,8,3,10,3,12,3,159,9,3,1,3,1,3,1,3,1,3,1,3,1,3,3,
		3,167,8,3,1,4,5,4,170,8,4,10,4,12,4,173,9,4,1,4,1,4,3,4,177,8,4,1,5,1,
		5,1,5,5,5,182,8,5,10,5,12,5,185,9,5,1,5,1,5,1,5,3,5,190,8,5,1,6,1,6,1,
		6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,8,54,64,77,111,120,157,
		171,183,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,6,1,0,22,
		23,2,0,56,56,58,59,2,0,26,27,51,51,1,0,28,30,1,0,31,33,1,0,34,39,239,0,
		37,1,0,0,0,2,95,1,0,0,0,4,126,1,0,0,0,6,166,1,0,0,0,8,176,1,0,0,0,10,178,
		1,0,0,0,12,191,1,0,0,0,14,194,1,0,0,0,16,199,1,0,0,0,18,201,1,0,0,0,20,
		204,1,0,0,0,22,207,1,0,0,0,24,209,1,0,0,0,26,211,1,0,0,0,28,213,1,0,0,
		0,30,215,1,0,0,0,32,217,1,0,0,0,34,36,3,4,2,0,35,34,1,0,0,0,36,39,1,0,
		0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,37,1,0,0,0,40,41,5,0,
		0,1,41,1,1,0,0,0,42,43,5,1,0,0,43,44,3,18,9,0,44,45,3,6,3,0,45,96,1,0,
		0,0,46,47,5,2,0,0,47,48,5,41,0,0,48,96,5,57,0,0,49,50,5,3,0,0,50,54,3,
		6,3,0,51,53,3,2,1,0,52,51,1,0,0,0,53,56,1,0,0,0,54,55,1,0,0,0,54,52,1,
		0,0,0,55,57,1,0,0,0,56,54,1,0,0,0,57,58,5,53,0,0,58,96,1,0,0,0,59,60,5,
		4,0,0,60,64,3,6,3,0,61,63,3,2,1,0,62,61,1,0,0,0,63,66,1,0,0,0,64,65,1,
		0,0,0,64,62,1,0,0,0,65,67,1,0,0,0,66,64,1,0,0,0,67,68,5,53,0,0,68,96,1,
		0,0,0,69,96,3,10,5,0,70,71,5,5,0,0,71,96,5,57,0,0,72,73,5,6,0,0,73,77,
		5,57,0,0,74,76,3,14,7,0,75,74,1,0,0,0,76,79,1,0,0,0,77,78,1,0,0,0,77,75,
		1,0,0,0,78,96,1,0,0,0,79,77,1,0,0,0,80,81,5,7,0,0,81,82,5,57,0,0,82,96,
		3,6,3,0,83,84,5,8,0,0,84,85,5,57,0,0,85,86,3,6,3,0,86,87,3,6,3,0,87,96,
		1,0,0,0,88,89,5,9,0,0,89,96,5,57,0,0,90,91,5,10,0,0,91,92,5,57,0,0,92,
		96,3,6,3,0,93,94,5,11,0,0,94,96,5,57,0,0,95,42,1,0,0,0,95,46,1,0,0,0,95,
		49,1,0,0,0,95,59,1,0,0,0,95,69,1,0,0,0,95,70,1,0,0,0,95,72,1,0,0,0,95,
		80,1,0,0,0,95,83,1,0,0,0,95,88,1,0,0,0,95,90,1,0,0,0,95,93,1,0,0,0,96,
		3,1,0,0,0,97,99,5,12,0,0,98,100,5,48,0,0,99,98,1,0,0,0,99,100,1,0,0,0,
		100,101,1,0,0,0,101,105,5,57,0,0,102,104,3,12,6,0,103,102,1,0,0,0,104,
		107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,111,1,0,0,0,107,105,1,
		0,0,0,108,110,3,2,1,0,109,108,1,0,0,0,110,113,1,0,0,0,111,112,1,0,0,0,
		111,109,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,127,5,53,0,0,115,116,
		5,13,0,0,116,120,5,40,0,0,117,119,3,2,1,0,118,117,1,0,0,0,119,122,1,0,
		0,0,120,121,1,0,0,0,120,118,1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,
		127,5,53,0,0,124,125,5,14,0,0,125,127,5,57,0,0,126,97,1,0,0,0,126,115,
		1,0,0,0,126,124,1,0,0,0,127,5,1,0,0,0,128,167,3,22,11,0,129,167,3,18,9,
		0,130,167,5,49,0,0,131,167,3,20,10,0,132,133,5,15,0,0,133,134,3,6,3,0,
		134,135,5,16,0,0,135,167,1,0,0,0,136,137,3,26,13,0,137,138,3,6,3,0,138,
		139,3,6,3,0,139,167,1,0,0,0,140,141,3,28,14,0,141,142,3,6,3,0,142,143,
		3,6,3,0,143,167,1,0,0,0,144,145,3,30,15,0,145,146,3,6,3,0,146,147,3,6,
		3,0,147,167,1,0,0,0,148,149,3,32,16,0,149,150,3,6,3,0,150,151,3,6,3,0,
		151,167,1,0,0,0,152,153,5,17,0,0,153,157,5,57,0,0,154,156,3,14,7,0,155,
		154,1,0,0,0,156,159,1,0,0,0,157,158,1,0,0,0,157,155,1,0,0,0,158,160,1,
		0,0,0,159,157,1,0,0,0,160,167,5,18,0,0,161,162,5,19,0,0,162,167,3,6,3,
		0,163,164,5,57,0,0,164,165,5,50,0,0,165,167,3,6,3,0,166,128,1,0,0,0,166,
		129,1,0,0,0,166,130,1,0,0,0,166,131,1,0,0,0,166,132,1,0,0,0,166,136,1,
		0,0,0,166,140,1,0,0,0,166,144,1,0,0,0,166,148,1,0,0,0,166,152,1,0,0,0,
		166,161,1,0,0,0,166,163,1,0,0,0,167,7,1,0,0,0,168,170,3,2,1,0,169,168,
		1,0,0,0,170,173,1,0,0,0,171,172,1,0,0,0,171,169,1,0,0,0,172,174,1,0,0,
		0,173,171,1,0,0,0,174,177,5,53,0,0,175,177,3,10,5,0,176,171,1,0,0,0,176,
		175,1,0,0,0,177,9,1,0,0,0,178,179,5,20,0,0,179,183,3,6,3,0,180,182,3,2,
		1,0,181,180,1,0,0,0,182,185,1,0,0,0,183,184,1,0,0,0,183,181,1,0,0,0,184,
		186,1,0,0,0,185,183,1,0,0,0,186,189,5,53,0,0,187,188,5,21,0,0,188,190,
		3,8,4,0,189,187,1,0,0,0,189,190,1,0,0,0,190,11,1,0,0,0,191,192,5,57,0,
		0,192,193,3,24,12,0,193,13,1,0,0,0,194,195,3,16,8,0,195,196,5,57,0,0,196,
		197,5,52,0,0,197,198,3,6,3,0,198,15,1,0,0,0,199,200,7,0,0,0,200,17,1,0,
		0,0,201,202,5,24,0,0,202,203,5,57,0,0,203,19,1,0,0,0,204,205,5,25,0,0,
		205,206,5,57,0,0,206,21,1,0,0,0,207,208,7,1,0,0,208,23,1,0,0,0,209,210,
		5,42,0,0,210,25,1,0,0,0,211,212,7,2,0,0,212,27,1,0,0,0,213,214,7,3,0,0,
		214,29,1,0,0,0,215,216,7,4,0,0,216,31,1,0,0,0,217,218,7,5,0,0,218,33,1,
		0,0,0,16,37,54,64,77,95,99,105,111,120,126,157,166,171,176,183,189
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
