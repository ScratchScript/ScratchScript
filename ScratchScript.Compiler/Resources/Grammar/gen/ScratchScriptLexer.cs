//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Projects/RiderProjects/ScratchScript/ScratchScript.Compiler/Resources/Syntax/ScratchScriptLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ScratchScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Whitespace=1, NewLine=2, Semicolon=3, LeftParen=4, RightParen=5, LeftBracket=6, 
		RightBracket=7, LeftBrace=8, RightBrace=9, Assignment=10, Comma=11, Not=12, 
		Arrow=13, Colon=14, Dot=15, Ternary=16, SingleLineCommentStart=17, MultiLineCommentStart=18, 
		MultiLineCommentEnd=19, Comment=20, LineComment=21, At=22, Hashtag=23, 
		Multiply=24, Plus=25, Minus=26, Divide=27, Power=28, Modulus=29, And=30, 
		Or=31, BitwiseAnd=32, BitwiseOr=33, BitwiseXor=34, PostIncrement=35, PostDecrement=36, 
		Greater=37, Lesser=38, GreaterOrEqual=39, LesserOrEqual=40, Equal=41, 
		NotEqual=42, AdditionAsignment=43, SubtractionAssignment=44, MultiplicationAssignment=45, 
		DivisionAssignment=46, ModulusAssignment=47, PowerAssignment=48, If=49, 
		Else=50, True=51, False=52, Break=53, Default=54, Debugger=55, As=56, 
		For=57, Ir=58, Case=59, Switch=60, While=61, VariableDeclare=62, Import=63, 
		EnumDeclare=64, ProcedureDeclare=65, Return=66, Throw=67, Repeat=68, Event=69, 
		From=70, Namespace=71, Type=72, List=73, Number=74, Identifier=75, Color=76, 
		Quote=77, Text=78, DollarBrace=79, EscapeSequence=80;
	public const int
		InString=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "InString"
	};

	public static readonly string[] ruleNames = {
		"Digit", "HexDigit", "Whitespace", "NewLine", "Semicolon", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Assignment", "Comma", "Not", "Arrow", "Colon", "Dot", "Ternary", "SingleLineCommentStart", 
		"MultiLineCommentStart", "MultiLineCommentEnd", "Comment", "LineComment", 
		"At", "Hashtag", "Multiply", "Plus", "Minus", "Divide", "Power", "Modulus", 
		"And", "Or", "BitwiseAnd", "BitwiseOr", "BitwiseXor", "PostIncrement", 
		"PostDecrement", "Greater", "Lesser", "GreaterOrEqual", "LesserOrEqual", 
		"Equal", "NotEqual", "AdditionAsignment", "SubtractionAssignment", "MultiplicationAssignment", 
		"DivisionAssignment", "ModulusAssignment", "PowerAssignment", "If", "Else", 
		"True", "False", "Break", "Default", "Debugger", "As", "For", "Ir", "Case", 
		"Switch", "While", "VariableDeclare", "Import", "EnumDeclare", "ProcedureDeclare", 
		"Return", "Throw", "Repeat", "Event", "From", "Namespace", "Type", "List", 
		"Number", "Identifier", "Color", "Quote", "Text", "DollarBrace", "EscapeSequence", 
		"QuoteInString"
	};


	    int nesting = 0;


	public ScratchScriptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ScratchScriptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", 
		"','", "'!'", "'->'", "':'", "'.'", "'?'", "'//'", "'/*'", "'*/'", null, 
		null, "'@'", "'#'", "'*'", "'+'", "'-'", "'/'", "'**'", "'%'", "'&&'", 
		"'||'", "'&'", "'|'", "'^'", "'++'", "'--'", "'>'", "'<'", "'>='", "'<='", 
		"'=='", "'!='", "'+='", "'-='", "'*='", "'/='", "'%='", "'**='", "'if'", 
		"'else'", "'true'", "'false'", "'break'", "'default'", "'debugger'", null, 
		"'for'", "'ir'", null, "'switch'", "'while'", null, null, null, null, 
		null, null, "'repeat'", null, null, null, null, "'list'", null, null, 
		null, null, null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "NewLine", "Semicolon", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Assignment", 
		"Comma", "Not", "Arrow", "Colon", "Dot", "Ternary", "SingleLineCommentStart", 
		"MultiLineCommentStart", "MultiLineCommentEnd", "Comment", "LineComment", 
		"At", "Hashtag", "Multiply", "Plus", "Minus", "Divide", "Power", "Modulus", 
		"And", "Or", "BitwiseAnd", "BitwiseOr", "BitwiseXor", "PostIncrement", 
		"PostDecrement", "Greater", "Lesser", "GreaterOrEqual", "LesserOrEqual", 
		"Equal", "NotEqual", "AdditionAsignment", "SubtractionAssignment", "MultiplicationAssignment", 
		"DivisionAssignment", "ModulusAssignment", "PowerAssignment", "If", "Else", 
		"True", "False", "Break", "Default", "Debugger", "As", "For", "Ir", "Case", 
		"Switch", "While", "VariableDeclare", "Import", "EnumDeclare", "ProcedureDeclare", 
		"Return", "Throw", "Repeat", "Event", "From", "Namespace", "Type", "List", 
		"Number", "Identifier", "Color", "Quote", "Text", "DollarBrace", "EscapeSequence"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ScratchScriptLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ScratchScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 9 : LeftBrace_action(_localctx, actionIndex); break;
		case 10 : RightBrace_action(_localctx, actionIndex); break;
		case 80 : DollarBrace_action(_localctx, actionIndex); break;
		}
	}
	private void LeftBrace_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 
		    nesting++;
		    pushMode(DEFAULT_MODE);
		 break;
		}
	}
	private void RightBrace_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: 
		    if(nesting > 0) {
		        nesting--;
		        popMode();
		    }
		 break;
		}
	}
	private void DollarBrace_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: 
		    nesting++;
		    pushMode(DEFAULT_MODE);
		 break;
		}
	}

	private static int[] _serializedATN = {
		4,0,80,588,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,
		2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,
		2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,
		2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,1,0,1,
		1,1,1,1,2,1,2,1,2,1,2,1,3,3,3,178,8,3,1,3,1,3,3,3,182,8,3,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,
		11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
		18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,5,21,228,8,21,10,
		21,12,21,231,9,21,1,21,1,21,1,21,1,21,1,22,1,22,5,22,239,8,22,10,22,12,
		22,242,9,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
		1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,
		1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,
		1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,
		1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,
		1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,
		1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,4,57,362,8,57,11,57,12,57,363,
		1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,4,60,
		379,8,60,11,60,12,60,380,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,
		1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,4,63,401,8,63,11,63,12,63,
		402,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,4,64,413,8,64,11,64,12,64,
		414,1,65,1,65,1,65,1,65,1,65,1,65,4,65,423,8,65,11,65,12,65,424,1,66,1,
		66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,4,66,437,8,66,11,66,12,66,438,
		1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,4,67,449,8,67,11,67,12,67,450,
		1,68,1,68,1,68,1,68,1,68,1,68,1,68,4,68,460,8,68,11,68,12,68,461,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,4,70,475,8,70,11,70,
		12,70,476,1,71,1,71,1,71,1,71,1,71,1,71,4,71,485,8,71,11,71,12,71,486,
		1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,4,72,501,8,
		72,11,72,12,72,502,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
		73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
		73,1,73,1,73,3,73,532,8,73,1,74,1,74,1,74,1,74,1,74,1,75,4,75,540,8,75,
		11,75,12,75,541,1,75,1,75,4,75,546,8,75,11,75,12,75,547,3,75,550,8,75,
		1,76,1,76,5,76,554,8,76,10,76,12,76,557,9,76,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,4,79,572,8,79,11,79,12,79,573,
		1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,229,
		0,83,2,0,4,0,6,1,8,2,10,3,12,4,14,5,16,6,18,7,20,8,22,9,24,10,26,11,28,
		12,30,13,32,14,34,15,36,16,38,17,40,18,42,19,44,20,46,21,48,22,50,23,52,
		24,54,25,56,26,58,27,60,28,62,29,64,30,66,31,68,32,70,33,72,34,74,35,76,
		36,78,37,80,38,82,39,84,40,86,41,88,42,90,43,92,44,94,45,96,46,98,47,100,
		48,102,49,104,50,106,51,108,52,110,53,112,54,114,55,116,56,118,57,120,
		58,122,59,124,60,126,61,128,62,130,63,132,64,134,65,136,66,138,67,140,
		68,142,69,144,70,146,71,148,72,150,73,152,74,154,75,156,76,158,77,160,
		78,162,79,164,80,166,0,2,0,1,9,1,0,48,57,3,0,48,57,65,70,97,102,2,0,9,
		9,32,32,2,0,10,10,13,13,1,0,46,46,3,0,65,90,95,95,97,122,4,0,48,57,65,
		90,95,95,97,122,2,0,34,34,39,39,4,0,34,34,36,36,39,39,92,92,608,0,6,1,
		0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,
		0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,
		1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,
		0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,
		1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,
		0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,
		1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,
		0,0,84,1,0,0,0,0,86,1,0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,
		1,0,0,0,0,96,1,0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,
		0,0,0,0,106,1,0,0,0,0,108,1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,
		0,0,0,0,116,1,0,0,0,0,118,1,0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,124,1,
		0,0,0,0,126,1,0,0,0,0,128,1,0,0,0,0,130,1,0,0,0,0,132,1,0,0,0,0,134,1,
		0,0,0,0,136,1,0,0,0,0,138,1,0,0,0,0,140,1,0,0,0,0,142,1,0,0,0,0,144,1,
		0,0,0,0,146,1,0,0,0,0,148,1,0,0,0,0,150,1,0,0,0,0,152,1,0,0,0,0,154,1,
		0,0,0,0,156,1,0,0,0,0,158,1,0,0,0,1,160,1,0,0,0,1,162,1,0,0,0,1,164,1,
		0,0,0,1,166,1,0,0,0,2,168,1,0,0,0,4,170,1,0,0,0,6,172,1,0,0,0,8,181,1,
		0,0,0,10,185,1,0,0,0,12,187,1,0,0,0,14,189,1,0,0,0,16,191,1,0,0,0,18,193,
		1,0,0,0,20,195,1,0,0,0,22,198,1,0,0,0,24,201,1,0,0,0,26,203,1,0,0,0,28,
		205,1,0,0,0,30,207,1,0,0,0,32,210,1,0,0,0,34,212,1,0,0,0,36,214,1,0,0,
		0,38,216,1,0,0,0,40,219,1,0,0,0,42,222,1,0,0,0,44,225,1,0,0,0,46,236,1,
		0,0,0,48,245,1,0,0,0,50,247,1,0,0,0,52,249,1,0,0,0,54,251,1,0,0,0,56,253,
		1,0,0,0,58,255,1,0,0,0,60,257,1,0,0,0,62,260,1,0,0,0,64,262,1,0,0,0,66,
		265,1,0,0,0,68,268,1,0,0,0,70,270,1,0,0,0,72,272,1,0,0,0,74,274,1,0,0,
		0,76,277,1,0,0,0,78,280,1,0,0,0,80,282,1,0,0,0,82,284,1,0,0,0,84,287,1,
		0,0,0,86,290,1,0,0,0,88,293,1,0,0,0,90,296,1,0,0,0,92,299,1,0,0,0,94,302,
		1,0,0,0,96,305,1,0,0,0,98,308,1,0,0,0,100,311,1,0,0,0,102,315,1,0,0,0,
		104,318,1,0,0,0,106,323,1,0,0,0,108,328,1,0,0,0,110,334,1,0,0,0,112,340,
		1,0,0,0,114,348,1,0,0,0,116,357,1,0,0,0,118,365,1,0,0,0,120,369,1,0,0,
		0,122,372,1,0,0,0,124,382,1,0,0,0,126,389,1,0,0,0,128,395,1,0,0,0,130,
		404,1,0,0,0,132,416,1,0,0,0,134,426,1,0,0,0,136,440,1,0,0,0,138,452,1,
		0,0,0,140,463,1,0,0,0,142,470,1,0,0,0,144,478,1,0,0,0,146,488,1,0,0,0,
		148,531,1,0,0,0,150,533,1,0,0,0,152,539,1,0,0,0,154,551,1,0,0,0,156,558,
		1,0,0,0,158,566,1,0,0,0,160,571,1,0,0,0,162,575,1,0,0,0,164,580,1,0,0,
		0,166,583,1,0,0,0,168,169,7,0,0,0,169,3,1,0,0,0,170,171,7,1,0,0,171,5,
		1,0,0,0,172,173,7,2,0,0,173,174,1,0,0,0,174,175,6,2,0,0,175,7,1,0,0,0,
		176,178,5,13,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,182,
		5,10,0,0,180,182,7,3,0,0,181,177,1,0,0,0,181,180,1,0,0,0,182,183,1,0,0,
		0,183,184,6,3,1,0,184,9,1,0,0,0,185,186,5,59,0,0,186,11,1,0,0,0,187,188,
		5,40,0,0,188,13,1,0,0,0,189,190,5,41,0,0,190,15,1,0,0,0,191,192,5,91,0,
		0,192,17,1,0,0,0,193,194,5,93,0,0,194,19,1,0,0,0,195,196,5,123,0,0,196,
		197,6,9,2,0,197,21,1,0,0,0,198,199,5,125,0,0,199,200,6,10,3,0,200,23,1,
		0,0,0,201,202,5,61,0,0,202,25,1,0,0,0,203,204,5,44,0,0,204,27,1,0,0,0,
		205,206,5,33,0,0,206,29,1,0,0,0,207,208,5,45,0,0,208,209,5,62,0,0,209,
		31,1,0,0,0,210,211,5,58,0,0,211,33,1,0,0,0,212,213,5,46,0,0,213,35,1,0,
		0,0,214,215,5,63,0,0,215,37,1,0,0,0,216,217,5,47,0,0,217,218,5,47,0,0,
		218,39,1,0,0,0,219,220,5,47,0,0,220,221,5,42,0,0,221,41,1,0,0,0,222,223,
		5,42,0,0,223,224,5,47,0,0,224,43,1,0,0,0,225,229,3,40,19,0,226,228,9,0,
		0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,230,1,0,0,0,229,227,1,0,0,0,230,
		232,1,0,0,0,231,229,1,0,0,0,232,233,3,42,20,0,233,234,1,0,0,0,234,235,
		6,21,1,0,235,45,1,0,0,0,236,240,3,38,18,0,237,239,8,3,0,0,238,237,1,0,
		0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,
		240,1,0,0,0,243,244,6,22,1,0,244,47,1,0,0,0,245,246,5,64,0,0,246,49,1,
		0,0,0,247,248,5,35,0,0,248,51,1,0,0,0,249,250,5,42,0,0,250,53,1,0,0,0,
		251,252,5,43,0,0,252,55,1,0,0,0,253,254,5,45,0,0,254,57,1,0,0,0,255,256,
		5,47,0,0,256,59,1,0,0,0,257,258,5,42,0,0,258,259,5,42,0,0,259,61,1,0,0,
		0,260,261,5,37,0,0,261,63,1,0,0,0,262,263,5,38,0,0,263,264,5,38,0,0,264,
		65,1,0,0,0,265,266,5,124,0,0,266,267,5,124,0,0,267,67,1,0,0,0,268,269,
		5,38,0,0,269,69,1,0,0,0,270,271,5,124,0,0,271,71,1,0,0,0,272,273,5,94,
		0,0,273,73,1,0,0,0,274,275,5,43,0,0,275,276,5,43,0,0,276,75,1,0,0,0,277,
		278,5,45,0,0,278,279,5,45,0,0,279,77,1,0,0,0,280,281,5,62,0,0,281,79,1,
		0,0,0,282,283,5,60,0,0,283,81,1,0,0,0,284,285,5,62,0,0,285,286,5,61,0,
		0,286,83,1,0,0,0,287,288,5,60,0,0,288,289,5,61,0,0,289,85,1,0,0,0,290,
		291,5,61,0,0,291,292,5,61,0,0,292,87,1,0,0,0,293,294,5,33,0,0,294,295,
		5,61,0,0,295,89,1,0,0,0,296,297,5,43,0,0,297,298,5,61,0,0,298,91,1,0,0,
		0,299,300,5,45,0,0,300,301,5,61,0,0,301,93,1,0,0,0,302,303,5,42,0,0,303,
		304,5,61,0,0,304,95,1,0,0,0,305,306,5,47,0,0,306,307,5,61,0,0,307,97,1,
		0,0,0,308,309,5,37,0,0,309,310,5,61,0,0,310,99,1,0,0,0,311,312,5,42,0,
		0,312,313,5,42,0,0,313,314,5,61,0,0,314,101,1,0,0,0,315,316,5,105,0,0,
		316,317,5,102,0,0,317,103,1,0,0,0,318,319,5,101,0,0,319,320,5,108,0,0,
		320,321,5,115,0,0,321,322,5,101,0,0,322,105,1,0,0,0,323,324,5,116,0,0,
		324,325,5,114,0,0,325,326,5,117,0,0,326,327,5,101,0,0,327,107,1,0,0,0,
		328,329,5,102,0,0,329,330,5,97,0,0,330,331,5,108,0,0,331,332,5,115,0,0,
		332,333,5,101,0,0,333,109,1,0,0,0,334,335,5,98,0,0,335,336,5,114,0,0,336,
		337,5,101,0,0,337,338,5,97,0,0,338,339,5,107,0,0,339,111,1,0,0,0,340,341,
		5,100,0,0,341,342,5,101,0,0,342,343,5,102,0,0,343,344,5,97,0,0,344,345,
		5,117,0,0,345,346,5,108,0,0,346,347,5,116,0,0,347,113,1,0,0,0,348,349,
		5,100,0,0,349,350,5,101,0,0,350,351,5,98,0,0,351,352,5,117,0,0,352,353,
		5,103,0,0,353,354,5,103,0,0,354,355,5,101,0,0,355,356,5,114,0,0,356,115,
		1,0,0,0,357,358,5,97,0,0,358,359,5,115,0,0,359,361,1,0,0,0,360,362,3,6,
		2,0,361,360,1,0,0,0,362,363,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,
		117,1,0,0,0,365,366,5,102,0,0,366,367,5,111,0,0,367,368,5,114,0,0,368,
		119,1,0,0,0,369,370,5,105,0,0,370,371,5,114,0,0,371,121,1,0,0,0,372,373,
		5,99,0,0,373,374,5,97,0,0,374,375,5,115,0,0,375,376,5,101,0,0,376,378,
		1,0,0,0,377,379,3,6,2,0,378,377,1,0,0,0,379,380,1,0,0,0,380,378,1,0,0,
		0,380,381,1,0,0,0,381,123,1,0,0,0,382,383,5,115,0,0,383,384,5,119,0,0,
		384,385,5,105,0,0,385,386,5,116,0,0,386,387,5,99,0,0,387,388,5,104,0,0,
		388,125,1,0,0,0,389,390,5,119,0,0,390,391,5,104,0,0,391,392,5,105,0,0,
		392,393,5,108,0,0,393,394,5,101,0,0,394,127,1,0,0,0,395,396,5,108,0,0,
		396,397,5,101,0,0,397,398,5,116,0,0,398,400,1,0,0,0,399,401,3,6,2,0,400,
		399,1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,129,1,
		0,0,0,404,405,5,105,0,0,405,406,5,109,0,0,406,407,5,112,0,0,407,408,5,
		111,0,0,408,409,5,114,0,0,409,410,5,116,0,0,410,412,1,0,0,0,411,413,3,
		6,2,0,412,411,1,0,0,0,413,414,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,
		415,131,1,0,0,0,416,417,5,101,0,0,417,418,5,110,0,0,418,419,5,117,0,0,
		419,420,5,109,0,0,420,422,1,0,0,0,421,423,3,6,2,0,422,421,1,0,0,0,423,
		424,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,133,1,0,0,0,426,427,5,
		102,0,0,427,428,5,117,0,0,428,429,5,110,0,0,429,430,5,99,0,0,430,431,5,
		116,0,0,431,432,5,105,0,0,432,433,5,111,0,0,433,434,5,110,0,0,434,436,
		1,0,0,0,435,437,3,6,2,0,436,435,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,
		0,438,439,1,0,0,0,439,135,1,0,0,0,440,441,5,114,0,0,441,442,5,101,0,0,
		442,443,5,116,0,0,443,444,5,117,0,0,444,445,5,114,0,0,445,446,5,110,0,
		0,446,448,1,0,0,0,447,449,3,6,2,0,448,447,1,0,0,0,449,450,1,0,0,0,450,
		448,1,0,0,0,450,451,1,0,0,0,451,137,1,0,0,0,452,453,5,116,0,0,453,454,
		5,104,0,0,454,455,5,114,0,0,455,456,5,111,0,0,456,457,5,119,0,0,457,459,
		1,0,0,0,458,460,3,6,2,0,459,458,1,0,0,0,460,461,1,0,0,0,461,459,1,0,0,
		0,461,462,1,0,0,0,462,139,1,0,0,0,463,464,5,114,0,0,464,465,5,101,0,0,
		465,466,5,112,0,0,466,467,5,101,0,0,467,468,5,97,0,0,468,469,5,116,0,0,
		469,141,1,0,0,0,470,471,5,111,0,0,471,472,5,110,0,0,472,474,1,0,0,0,473,
		475,3,6,2,0,474,473,1,0,0,0,475,476,1,0,0,0,476,474,1,0,0,0,476,477,1,
		0,0,0,477,143,1,0,0,0,478,479,5,102,0,0,479,480,5,114,0,0,480,481,5,111,
		0,0,481,482,5,109,0,0,482,484,1,0,0,0,483,485,3,6,2,0,484,483,1,0,0,0,
		485,486,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,145,1,0,0,0,488,489,
		5,110,0,0,489,490,5,97,0,0,490,491,5,109,0,0,491,492,5,101,0,0,492,493,
		5,115,0,0,493,494,5,112,0,0,494,495,5,97,0,0,495,496,5,99,0,0,496,497,
		5,101,0,0,497,498,5,32,0,0,498,500,1,0,0,0,499,501,3,6,2,0,500,499,1,0,
		0,0,501,502,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,147,1,0,0,0,504,
		505,5,110,0,0,505,506,5,117,0,0,506,507,5,109,0,0,507,508,5,98,0,0,508,
		509,5,101,0,0,509,532,5,114,0,0,510,511,5,115,0,0,511,512,5,116,0,0,512,
		513,5,114,0,0,513,514,5,105,0,0,514,515,5,110,0,0,515,532,5,103,0,0,516,
		517,5,98,0,0,517,518,5,111,0,0,518,519,5,111,0,0,519,520,5,108,0,0,520,
		521,5,101,0,0,521,522,5,97,0,0,522,532,5,110,0,0,523,524,5,99,0,0,524,
		525,5,111,0,0,525,526,5,108,0,0,526,527,5,111,0,0,527,532,5,114,0,0,528,
		529,5,97,0,0,529,530,5,110,0,0,530,532,5,121,0,0,531,504,1,0,0,0,531,510,
		1,0,0,0,531,516,1,0,0,0,531,523,1,0,0,0,531,528,1,0,0,0,532,149,1,0,0,
		0,533,534,5,108,0,0,534,535,5,105,0,0,535,536,5,115,0,0,536,537,5,116,
		0,0,537,151,1,0,0,0,538,540,3,2,0,0,539,538,1,0,0,0,540,541,1,0,0,0,541,
		539,1,0,0,0,541,542,1,0,0,0,542,549,1,0,0,0,543,545,7,4,0,0,544,546,3,
		2,0,0,545,544,1,0,0,0,546,547,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,
		548,550,1,0,0,0,549,543,1,0,0,0,549,550,1,0,0,0,550,153,1,0,0,0,551,555,
		7,5,0,0,552,554,7,6,0,0,553,552,1,0,0,0,554,557,1,0,0,0,555,553,1,0,0,
		0,555,556,1,0,0,0,556,155,1,0,0,0,557,555,1,0,0,0,558,559,3,50,24,0,559,
		560,3,4,1,0,560,561,3,4,1,0,561,562,3,4,1,0,562,563,3,4,1,0,563,564,3,
		4,1,0,564,565,3,4,1,0,565,157,1,0,0,0,566,567,7,7,0,0,567,568,1,0,0,0,
		568,569,6,78,4,0,569,159,1,0,0,0,570,572,8,8,0,0,571,570,1,0,0,0,572,573,
		1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,161,1,0,0,0,575,576,5,36,0,
		0,576,577,5,123,0,0,577,578,1,0,0,0,578,579,6,80,5,0,579,163,1,0,0,0,580,
		581,5,92,0,0,581,582,9,0,0,0,582,165,1,0,0,0,583,584,7,7,0,0,584,585,1,
		0,0,0,585,586,6,82,6,0,586,587,6,82,7,0,587,167,1,0,0,0,23,0,1,177,181,
		229,240,363,380,402,414,424,438,450,461,476,486,502,531,541,547,549,555,
		573,8,0,1,0,6,0,0,1,9,0,1,10,1,5,1,0,1,80,2,7,77,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
